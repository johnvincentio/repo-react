{"ast":null,"code":"import { selectors } from './base';\nexport var getUserIds = function getUserIds(state) {\n  return selectors.getIds(state, {\n    type: 'user'\n  });\n};\nexport var getTaskIds = function getTaskIds(state) {\n  return selectors.getIds(state, {\n    type: 'task'\n  });\n};\nexport var getStatusIds = function getStatusIds(state) {\n  return selectors.getIds(state, {\n    type: 'status'\n  });\n};\nexport var getTagIds = function getTagIds(state) {\n  return selectors.getIds(state, {\n    type: 'tag'\n  });\n};\nexport var getCommentIds = function getCommentIds(state) {\n  return selectors.getIds(state, {\n    type: 'comment'\n  });\n};\nexport var getUser = function getUser(state, args) {\n  return selectors.getEntity(state, {\n    type: 'user',\n    id: args.id\n  });\n};\nexport var getTask = function getTask(state, args) {\n  return selectors.getEntity(state, {\n    type: 'task',\n    id: args.id\n  });\n};\nexport var getStatus = function getStatus(state, args) {\n  return selectors.getEntity(state, {\n    type: 'status',\n    id: args.id\n  });\n};\nexport var getTag = function getTag(state, args) {\n  return selectors.getEntity(state, {\n    type: 'tag',\n    id: args.id\n  });\n};\nexport var getComment = function getComment(state, args) {\n  return selectors.getEntity(state, {\n    type: 'comment',\n    id: args.id\n  });\n};\nexport var getCommentUsername = function getCommentUsername(state, args) {\n  var comment = getComment(state, args);\n\n  if (!comment) {\n    return '';\n  }\n\n  var user = getUser(state, {\n    id: comment.creatorId\n  });\n\n  if (!user) {\n    return '';\n  }\n\n  return user.username;\n};","map":{"version":3,"sources":["/Users/jv/Desktop/MyDevelopment/github/repo-react/dnd/kanban/kanban-dashboard/src/dashboard/store/selectors.ts"],"names":["selectors","getUserIds","state","getIds","type","getTaskIds","getStatusIds","getTagIds","getCommentIds","getUser","args","getEntity","id","getTask","getStatus","getTag","getComment","getCommentUsername","comment","user","creatorId","username"],"mappings":"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","sourcesContent":["import { Comment, Status, Tag, Task, User, ProjectData } from './types';\nimport { selectors } from './base';\n\nexport const getUserIds = (state: ProjectData) => selectors.getIds(state, { type: 'user' }) as string[];\nexport const getTaskIds = (state: ProjectData) => selectors.getIds(state, { type: 'task' }) as string[];\nexport const getStatusIds = (state: ProjectData) => selectors.getIds(state, { type: 'status' }) as string[];\nexport const getTagIds = (state: ProjectData) => selectors.getIds(state, { type: 'tag' }) as string[];\nexport const getCommentIds = (state: ProjectData) => selectors.getIds(state, { type: 'comment' }) as string[];\n\nexport const getUser = (state: ProjectData, args: { id: string }) => selectors.getEntity<User>(state, { type: 'user', id: args.id });\nexport const getTask = (state: ProjectData, args: { id: string }) => selectors.getEntity<Task>(state, { type: 'task', id: args.id });\nexport const getStatus = (state: ProjectData, args: { id: string }) => selectors.getEntity<Status>(state, { type: 'status', id: args.id });\nexport const getTag = (state: ProjectData, args: { id: string }) => selectors.getEntity<Tag>(state, { type: 'tag', id: args.id });\nexport const getComment = (state: ProjectData, args: { id: string }) => selectors.getEntity<Comment>(state, { type: 'comment', id: args.id });\n\n\nexport const getCommentUsername = (state: ProjectData, args: { id }) => {\n  const comment = getComment(state, args);\n  if (!comment) {\n    return '';\n  }\n\n  const user = getUser(state, { id: comment.creatorId });\n  if (!user) {\n    return '';\n  }\n\n  return user.username;\n};\n"]},"metadata":{},"sourceType":"module"}