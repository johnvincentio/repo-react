{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\n\nvar _jsxFileName = \"/Users/jv/Desktop/MyDevelopment/github/repo-react/dnd/kanban/kanban-dashboard/src/dashboard/StatusLane.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport AddIcon from '@material-ui/icons/Add';\nimport Dialog from '@material-ui/core/Dialog';\nimport DragIndicator from '@material-ui/icons/DragIndicator';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport { Draggable, Droppable } from 'react-beautiful-dnd';\nimport { hooks, emptyArray } from './store';\nimport { OptionsPopper } from '../components/options-popper';\nimport { ConfirmationButtons } from '../components/buttons';\nimport StatusEditorForm from './StatusEditorForm';\nimport TaskCard from './TaskCard';\nimport TaskEditorForm from './TaskEditorForm';\nimport { useLaneStyles, useCommonStyles } from './styles';\nimport { useCurrentUserId } from './CurrentUser';\nexport default function StatusLane(_ref) {\n  _s();\n\n  var _this = this;\n\n  var id = _ref.id,\n      dragHandleProps = _ref.dragHandleProps;\n  var currentUserId = useCurrentUserId();\n  var createTask = hooks.useCreateTask();\n  var updateStatus = hooks.useUpdateStatus();\n  var deleteStatus = hooks.useDeleteStatus();\n\n  var _hooks$useStatus = hooks.useStatus(id),\n      title = _hooks$useStatus.title,\n      taskIds = _hooks$useStatus.taskIds;\n\n  var _useState = useState(false),\n      isTaskFormOpen = _useState[0],\n      setIsTaskFormOpen = _useState[1];\n\n  var openTaskForm = function openTaskForm() {\n    return setIsTaskFormOpen(true);\n  };\n\n  var closeTaskForm = function closeTaskForm() {\n    return setIsTaskFormOpen(false);\n  };\n\n  var _useState2 = useState(false),\n      isStatusEditorOpen = _useState2[0],\n      setIsStatusEditorOpen = _useState2[1];\n\n  var openStatusEditor = function openStatusEditor() {\n    return setIsStatusEditorOpen(true);\n  };\n\n  var closeStatusEditor = function closeStatusEditor() {\n    return setIsStatusEditorOpen(false);\n  };\n\n  var _useState3 = useState(false),\n      isDeleteConfirmOpen = _useState3[0],\n      setIsDeleteConfirmOpen = _useState3[1];\n\n  var openDeleteConfirm = function openDeleteConfirm() {\n    return setIsDeleteConfirmOpen(true);\n  };\n\n  var closeDeleteConfirm = function closeDeleteConfirm() {\n    return setIsDeleteConfirmOpen(false);\n  };\n\n  var handleSubmitNewTask = function handleSubmitNewTask(title) {\n    if (createTask && currentUserId) {\n      createTask({\n        title: title,\n        statusId: id,\n        creatorId: currentUserId\n      });\n    }\n\n    closeTaskForm();\n  };\n\n  var handleSubmitEditStatus = function handleSubmitEditStatus(title) {\n    if (updateStatus) {\n      updateStatus(id, {\n        title: title\n      });\n    }\n\n    closeStatusEditor();\n  };\n\n  var handleConfirmDelete = function handleConfirmDelete() {\n    if (deleteStatus) {\n      deleteStatus(id);\n    }\n  };\n\n  var classNames = useLaneStyles();\n  var commonClassNames = useCommonStyles();\n  return __jsx(Paper, {\n    className: \"\".concat(classNames.lane, \" board-status\"),\n    elevation: 0,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: classNames.laneHeader,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }, __jsx(\"span\", _extends({}, dragHandleProps, {\n    className: commonClassNames.dragHandle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }\n  }), __jsx(DragIndicator, {\n    fontSize: \"small\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 11\n    }\n  })), __jsx(Typography, {\n    align: \"center\",\n    className: classNames.laneTitle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }\n  }, title), __jsx(\"div\", {\n    className: classNames.buttons,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }\n  }, __jsx(IconButton, {\n    onClick: openTaskForm,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 11\n    }\n  }, __jsx(AddIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }\n  })), __jsx(OptionsPopper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 11\n    }\n  }, __jsx(StatusOptions, {\n    onClickEdit: openStatusEditor,\n    onClickDelete: openDeleteConfirm,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }\n  }))), __jsx(Dialog, {\n    open: isStatusEditorOpen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }\n  }, __jsx(Paper, {\n    className: classNames.dialog,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 11\n    }\n  }, __jsx(StatusEditorForm, {\n    title: title,\n    onSubmit: handleSubmitEditStatus,\n    onCancel: closeStatusEditor,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }\n  }))), __jsx(Dialog, {\n    open: isDeleteConfirmOpen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }\n  }, __jsx(Paper, {\n    className: classNames.dialog,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 11\n    }\n  }, __jsx(Typography, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }\n  }, \"Delete column \\\"\", title, \"\\\"?\"), __jsx(ConfirmationButtons, {\n    onCancel: closeDeleteConfirm,\n    onConfirm: handleConfirmDelete,\n    confirmColor: \"secondary\",\n    confirmLabel: \"Delete\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }\n  })))), __jsx(\"div\", {\n    className: classNames.form,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }\n  }, isTaskFormOpen && __jsx(TaskEditorForm, {\n    onSubmit: handleSubmitNewTask,\n    onCancel: closeTaskForm,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 11\n    }\n  })), __jsx(Droppable, {\n    type: \"taskCard\",\n    droppableId: id.toString(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }\n  }, function (provided) {\n    return __jsx(\"div\", _extends({\n      ref: provided.innerRef\n    }, provided.droppableProps, {\n      className: classNames.tasks,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 13\n      }\n    }), (taskIds || emptyArray).map(function (taskId, index) {\n      return __jsx(Draggable, {\n        key: taskId,\n        draggableId: taskId.toString(),\n        index: index,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 17\n        }\n      }, function (provided) {\n        return __jsx(\"div\", _extends({\n          className: classNames.taskContainer,\n          ref: provided.innerRef\n        }, provided.draggableProps, {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 23\n          }\n        }), __jsx(TaskCard, {\n          statusId: id,\n          id: taskId,\n          dragHandleProps: provided.dragHandleProps,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 25\n          }\n        }));\n      });\n    }));\n  }));\n}\n\n_s(StatusLane, \"LPcTtfGVyN3v7dfYXmmmaXsx1b4=\", false, function () {\n  return [useCurrentUserId, hooks.useCreateTask, hooks.useUpdateStatus, hooks.useDeleteStatus, hooks.useStatus, useLaneStyles, useCommonStyles];\n});\n\n_c = StatusLane;\nexport function StatusOptions(_ref2) {\n  var onClickEdit = _ref2.onClickEdit,\n      onClickDelete = _ref2.onClickDelete;\n  return __jsx(List, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 5\n    }\n  }, __jsx(ListItem, {\n    button: true,\n    onClick: onClickEdit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }\n  }, __jsx(ListItemText, {\n    primary: \"Edit Column\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 9\n    }\n  })), __jsx(ListItem, {\n    button: true,\n    onClick: onClickDelete,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }\n  }, __jsx(ListItemText, {\n    primary: \"Delete Column\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 9\n    }\n  })));\n}\n_c2 = StatusOptions;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"StatusLane\");\n$RefreshReg$(_c2, \"StatusOptions\");","map":{"version":3,"sources":["/Users/jv/Desktop/MyDevelopment/github/repo-react/dnd/kanban/kanban-dashboard/src/dashboard/StatusLane.tsx"],"names":["React","useState","Paper","Typography","IconButton","AddIcon","Dialog","DragIndicator","List","ListItem","ListItemText","Draggable","Droppable","hooks","emptyArray","OptionsPopper","ConfirmationButtons","StatusEditorForm","TaskCard","TaskEditorForm","useLaneStyles","useCommonStyles","useCurrentUserId","StatusLane","id","dragHandleProps","currentUserId","createTask","useCreateTask","updateStatus","useUpdateStatus","deleteStatus","useDeleteStatus","useStatus","title","taskIds","isTaskFormOpen","setIsTaskFormOpen","openTaskForm","closeTaskForm","isStatusEditorOpen","setIsStatusEditorOpen","openStatusEditor","closeStatusEditor","isDeleteConfirmOpen","setIsDeleteConfirmOpen","openDeleteConfirm","closeDeleteConfirm","handleSubmitNewTask","statusId","creatorId","handleSubmitEditStatus","handleConfirmDelete","classNames","commonClassNames","lane","laneHeader","dragHandle","laneTitle","buttons","dialog","form","toString","provided","innerRef","droppableProps","tasks","map","taskId","index","taskContainer","draggableProps","StatusOptions","onClickEdit","onClickDelete"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport AddIcon from '@material-ui/icons/Add';\nimport Dialog from '@material-ui/core/Dialog';\nimport DragIndicator from '@material-ui/icons/DragIndicator';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\n\n\nimport {\n  Draggable,\n  DraggableProvided,\n  Droppable,\n  DroppableProvided,\n  DraggableProvidedDragHandleProps\n} from 'react-beautiful-dnd';\n\nimport { hooks, emptyArray } from './store';\n\nimport { OptionsPopper } from '../components/options-popper';\nimport { ConfirmationButtons } from '../components/buttons';\nimport StatusEditorForm from './StatusEditorForm';\nimport TaskCard from './TaskCard';\nimport TaskEditorForm from './TaskEditorForm';\nimport { useLaneStyles, useCommonStyles } from './styles';\nimport { useCurrentUserId } from './CurrentUser';\n\n\nexport interface Props {\n  id: string,\n  dragHandleProps: DraggableProvidedDragHandleProps\n}\n\nexport default function StatusLane({ id, dragHandleProps }: Props) {\n  const currentUserId = useCurrentUserId();\n  const createTask = hooks.useCreateTask();\n  const updateStatus = hooks.useUpdateStatus();\n  const deleteStatus = hooks.useDeleteStatus();\n  const { title, taskIds } = hooks.useStatus(id);\n\n  const [isTaskFormOpen, setIsTaskFormOpen] = useState(false);\n  const openTaskForm = () => setIsTaskFormOpen(true);\n  const closeTaskForm = () => setIsTaskFormOpen(false);\n\n  const [isStatusEditorOpen, setIsStatusEditorOpen] = useState(false);\n  const openStatusEditor = () => setIsStatusEditorOpen(true);\n  const closeStatusEditor = () => setIsStatusEditorOpen(false);\n\n  const [isDeleteConfirmOpen, setIsDeleteConfirmOpen] = useState(false);\n  const openDeleteConfirm = () => setIsDeleteConfirmOpen(true);\n  const closeDeleteConfirm = () => setIsDeleteConfirmOpen(false);\n\n  const handleSubmitNewTask = (title: string) => {\n    if (createTask && currentUserId) {\n      createTask({ title, statusId: id, creatorId: currentUserId });\n    }\n    closeTaskForm();\n  };\n\n  const handleSubmitEditStatus = (title: string) => {\n    if (updateStatus) {\n      updateStatus(id, { title })\n    }\n    closeStatusEditor();\n  };\n\n  const handleConfirmDelete = () => {\n    if (deleteStatus) {\n      deleteStatus(id);\n    }\n  };\n\n  const classNames = useLaneStyles();\n  const commonClassNames = useCommonStyles();\n\n  return (\n    <Paper\n      className={`${classNames.lane} board-status`}\n      elevation={0}\n    >\n      <div className={classNames.laneHeader}>\n        <span {...dragHandleProps} className={commonClassNames.dragHandle}>\n          <DragIndicator fontSize=\"small\" />\n        </span>\n\n        <Typography align=\"center\" className={classNames.laneTitle}>{title}</Typography>\n\n        <div className={classNames.buttons}>\n          <IconButton onClick={openTaskForm}>\n            <AddIcon />\n          </IconButton>\n\n          <OptionsPopper>\n            <StatusOptions\n              onClickEdit={openStatusEditor}\n              onClickDelete={openDeleteConfirm}\n            />\n          </OptionsPopper>\n        </div>\n\n        <Dialog open={isStatusEditorOpen}>\n          <Paper className={classNames.dialog}>\n            <StatusEditorForm\n              title={title}\n              onSubmit={handleSubmitEditStatus}\n              onCancel={closeStatusEditor}\n            />\n          </Paper>\n        </Dialog>\n\n        <Dialog open={isDeleteConfirmOpen}>\n          <Paper className={classNames.dialog}>\n            <Typography>Delete column \"{title}\"?</Typography>\n            <ConfirmationButtons\n              onCancel={closeDeleteConfirm}\n              onConfirm={handleConfirmDelete}\n              confirmColor=\"secondary\"\n              confirmLabel=\"Delete\"\n            />\n          </Paper>\n        </Dialog>\n      </div>\n\n      <div className={classNames.form}>\n        {isTaskFormOpen && (\n          <TaskEditorForm onSubmit={handleSubmitNewTask} onCancel={closeTaskForm}/>\n        )}\n      </div>\n\n      <Droppable type=\"taskCard\" droppableId={id.toString()}>\n        {(provided: DroppableProvided) => {\n          return (\n            <div ref={provided.innerRef} {...provided.droppableProps} className={classNames.tasks}>\n              {(taskIds || emptyArray).map((taskId, index) => (\n                <Draggable key={taskId} draggableId={taskId.toString()} index={index}>\n                  {(provided: DraggableProvided) => {\n                    return (\n                      <div className={classNames.taskContainer} ref={provided.innerRef} {...provided.draggableProps}>\n                        <TaskCard statusId={id} id={taskId} dragHandleProps={provided.dragHandleProps} />\n                      </div>\n                    )\n                  }}\n                </Draggable>\n              ))}\n            </div>\n          )\n        }}\n      </Droppable>\n    </Paper>\n  );\n}\n\nexport interface StatusOptionsProps {\n  onClickEdit: () => void,\n  onClickDelete: () => void\n}\n\nexport function StatusOptions({ onClickEdit, onClickDelete }: StatusOptionsProps) {\n  return (\n    <List>\n      <ListItem button onClick={onClickEdit}>\n        <ListItemText primary=\"Edit Column\"/>\n      </ListItem>\n      <ListItem button onClick={onClickDelete}>\n        <ListItemText primary=\"Delete Column\"/>\n      </ListItem>\n    </List>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}