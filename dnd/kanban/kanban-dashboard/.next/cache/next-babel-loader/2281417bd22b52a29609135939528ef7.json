{"ast":null,"code":"var _jsxFileName = \"/Users/jv/Desktop/MyDevelopment/github/repo-react/dnd/kanban/kanban-dashboard/src/service/provider.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { createContext, useContext } from 'react';\nimport { LocalStorageServiceClient } from './client';\nvar ServiceContext = createContext({});\nvar client = new LocalStorageServiceClient();\nexport function ServiceProvider(_ref) {\n  var children = _ref.children;\n  var value = {\n    client: client\n  };\n  return __jsx(ServiceContext.Provider, {\n    value: value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 5\n    }\n  }, children);\n}\n_c = ServiceProvider;\nexport var useServiceContext = function useServiceContext() {\n  _s();\n\n  return useContext(ServiceContext);\n};\n\n_s(useServiceContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport var useServiceClient = function useServiceClient() {\n  _s2();\n\n  var _useContext = useContext(ServiceContext),\n      client = _useContext.client;\n\n  if (!client) {\n    throw new Error('ServiceContext client is undefined, check that useServiceClient is being called inside the ServiceProvider context');\n  }\n\n  return client;\n};\n\n_s2(useServiceClient, \"z61b9Lqq4geyv4W7FIyI2YCrXy0=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"ServiceProvider\");","map":{"version":3,"sources":["/Users/jv/Desktop/MyDevelopment/github/repo-react/dnd/kanban/kanban-dashboard/src/service/provider.tsx"],"names":["React","createContext","useContext","LocalStorageServiceClient","ServiceContext","client","ServiceProvider","children","value","useServiceContext","useServiceClient","Error"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAA2BC,aAA3B,EAA0CC,UAA1C,QAA4D,OAA5D;AAEA,SAASC,yBAAT,QAA0C,UAA1C;AAMA,IAAMC,cAAc,GAAGH,aAAa,CAAe,EAAf,CAApC;AAMA,IAAMI,MAAM,GAAG,IAAIF,yBAAJ,EAAf;AAEA,OAAO,SAASG,eAAT,OAA8C;AAAA,MAAnBC,QAAmB,QAAnBA,QAAmB;AACnD,MAAMC,KAAmB,GAAG;AAAEH,IAAAA,MAAM,EAANA;AAAF,GAA5B;AAEA,SACE,MAAC,cAAD,CAAgB,QAAhB;AAAyB,IAAA,KAAK,EAAEG,KAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGD,QADH,CADF;AAKD;KAReD,e;AAUhB,OAAO,IAAMG,iBAAiB,GAAG,SAApBA,iBAAoB,GAAM;AAAA;;AACrC,SAAOP,UAAU,CAACE,cAAD,CAAjB;AACD,CAFM;;GAAMK,iB;;AAIb,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAM;AAAA;;AAAA,oBACjBR,UAAU,CAACE,cAAD,CADO;AAAA,MAC5BC,MAD4B,eAC5BA,MAD4B;;AAEpC,MAAI,CAACA,MAAL,EAAa;AACX,UAAM,IAAIM,KAAJ,CAAU,oHAAV,CAAN;AACD;;AACD,SAAON,MAAP;AACD,CANM;;IAAMK,gB","sourcesContent":["import React, { ReactNode, createContext, useContext } from 'react';\n\nimport { LocalStorageServiceClient } from './client';\n\nexport interface ContextValue {\n  client?: LocalStorageServiceClient,\n  isClientAuthenticated?: boolean,\n}\nconst ServiceContext = createContext<ContextValue>({});\n\nexport interface Props {\n  children: ReactNode\n}\n\nconst client = new LocalStorageServiceClient();\n\nexport function ServiceProvider({ children }: Props) {\n  const value: ContextValue = { client };\n\n  return (\n    <ServiceContext.Provider value={value}>\n      {children}\n    </ServiceContext.Provider>\n  );\n}\n\nexport const useServiceContext = () => {\n  return useContext(ServiceContext);\n};\n\nexport const useServiceClient = () => {\n  const { client } = useContext(ServiceContext);\n  if (!client) {\n    throw new Error('ServiceContext client is undefined, check that useServiceClient is being called inside the ServiceProvider context')\n  }\n  return client;\n};\n"]},"metadata":{},"sourceType":"module"}