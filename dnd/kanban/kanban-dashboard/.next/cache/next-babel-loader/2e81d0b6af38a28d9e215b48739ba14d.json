{"ast":null,"code":"var _jsxFileName = \"/Users/jv/Desktop/MyDevelopment/github/repo-react/dnd/kanban/kanban-dashboard/src/dashboard/CurrentUser.tsx\";\nvar __jsx = React.createElement;\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { hooks } from './store';\nimport { v4 as uuid } from 'uuid';\nconst CurrentUserContext = createContext(null);\nexport default function CurrentUserProvider({\n  children,\n  userId: initialUserId\n}) {\n  const {\n    0: userId,\n    1: setUserId\n  } = useState(initialUserId); // initialize a default user if given an empty userId\n\n  const createUser = hooks.useCreateUser();\n  useEffect(() => {\n    if (!userId) {\n      const id = uuid();\n      createUser({\n        id,\n        username: 'Default User'\n      });\n      setUserId(id);\n    }\n  }, [userId, setUserId, createUser]);\n  const value = {\n    userId,\n    setUserId\n  };\n  return __jsx(CurrentUserContext.Provider, {\n    value: value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 5\n    }\n  }, children);\n}\nexport function useCurrentUserId() {\n  const context = useContext(CurrentUserContext);\n  return context.userId;\n}\nexport function useSetCurrentUserId() {\n  const context = useContext(CurrentUserContext);\n  return context.setUserId;\n}\nexport function useCurrentUsername() {\n  const userId = useCurrentUserId();\n  const user = hooks.useUser(userId);\n\n  if (!user) {\n    return '';\n  }\n\n  return user.username;\n}","map":{"version":3,"sources":["/Users/jv/Desktop/MyDevelopment/github/repo-react/dnd/kanban/kanban-dashboard/src/dashboard/CurrentUser.tsx"],"names":["React","createContext","useContext","useState","useEffect","hooks","v4","uuid","CurrentUserContext","CurrentUserProvider","children","userId","initialUserId","setUserId","createUser","useCreateUser","id","username","value","useCurrentUserId","context","useSetCurrentUserId","useCurrentUsername","user","useUser"],"mappings":";;AAAA,OAAOA,KAAP,IAA2BC,aAA3B,EAA0CC,UAA1C,EAAsDC,QAAtD,EAAgEC,SAAhE,QAAiF,OAAjF;AACA,SAASC,KAAT,QAAsB,SAAtB;AACA,SAASC,EAAE,IAAIC,IAAf,QAA2B,MAA3B;AAOA,MAAMC,kBAAkB,GAAGP,aAAa,CAA0B,IAA1B,CAAxC;AAMA,eAAe,SAASQ,mBAAT,CAA6B;AAAEC,EAAAA,QAAF;AAAYC,EAAAA,MAAM,EAAEC;AAApB,CAA7B,EAAyE;AACtF,QAAM;AAAA,OAACD,MAAD;AAAA,OAASE;AAAT,MAAsBV,QAAQ,CAACS,aAAD,CAApC,CADsF,CAGtF;;AACA,QAAME,UAAU,GAAGT,KAAK,CAACU,aAAN,EAAnB;AACAX,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACO,MAAL,EAAa;AACX,YAAMK,EAAE,GAAGT,IAAI,EAAf;AACAO,MAAAA,UAAU,CAAC;AAAEE,QAAAA,EAAF;AAAMC,QAAAA,QAAQ,EAAE;AAAhB,OAAD,CAAV;AACAJ,MAAAA,SAAS,CAACG,EAAD,CAAT;AACD;AACF,GANQ,EAMN,CAACL,MAAD,EAASE,SAAT,EAAoBC,UAApB,CANM,CAAT;AASA,QAAMI,KAAK,GAAG;AAAEP,IAAAA,MAAF;AAAUE,IAAAA;AAAV,GAAd;AACA,SACE,MAAC,kBAAD,CAAoB,QAApB;AAA6B,IAAA,KAAK,EAAEK,KAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGR,QADH,CADF;AAKD;AAED,OAAO,SAASS,gBAAT,GAA4B;AACjC,QAAMC,OAAO,GAAGlB,UAAU,CAACM,kBAAD,CAA1B;AACA,SAAOY,OAAO,CAACT,MAAf;AACD;AAED,OAAO,SAASU,mBAAT,GAA+B;AACpC,QAAMD,OAAO,GAAGlB,UAAU,CAACM,kBAAD,CAA1B;AACA,SAAOY,OAAO,CAACP,SAAf;AACD;AAED,OAAO,SAASS,kBAAT,GAA8B;AACnC,QAAMX,MAAM,GAAGQ,gBAAgB,EAA/B;AACA,QAAMI,IAAI,GAAGlB,KAAK,CAACmB,OAAN,CAAcb,MAAd,CAAb;;AACA,MAAI,CAACY,IAAL,EAAW;AACT,WAAO,EAAP;AACD;;AAED,SAAOA,IAAI,CAACN,QAAZ;AACD","sourcesContent":["import React, { ReactNode, createContext, useContext, useState, useEffect } from 'react';\nimport { hooks } from './store';\nimport { v4 as uuid } from 'uuid';\n\nexport interface CurrentUserContextValue {\n  userId: string,\n  setUserId: (userId: string) => void\n}\n\nconst CurrentUserContext = createContext<CurrentUserContextValue>(null);\n\nexport interface Props {\n  children: ReactNode,\n  userId: string\n}\nexport default function CurrentUserProvider({ children, userId: initialUserId }: Props) {\n  const [userId, setUserId] = useState(initialUserId);\n\n  // initialize a default user if given an empty userId\n  const createUser = hooks.useCreateUser();\n  useEffect(() => {\n    if (!userId) {\n      const id = uuid();\n      createUser({ id, username: 'Default User' });\n      setUserId(id)\n    }\n  }, [userId, setUserId, createUser])\n\n\n  const value = { userId, setUserId };\n  return (\n    <CurrentUserContext.Provider value={value}>\n      {children}\n    </CurrentUserContext.Provider>\n  );\n}\n\nexport function useCurrentUserId() {\n  const context = useContext(CurrentUserContext);\n  return context.userId;\n}\n\nexport function useSetCurrentUserId() {\n  const context = useContext(CurrentUserContext);\n  return context.setUserId;\n}\n\nexport function useCurrentUsername() {\n  const userId = useCurrentUserId();\n  const user = hooks.useUser(userId);\n  if (!user) {\n    return '';\n  }\n\n  return user.username;\n}\n"]},"metadata":{},"sourceType":"module"}