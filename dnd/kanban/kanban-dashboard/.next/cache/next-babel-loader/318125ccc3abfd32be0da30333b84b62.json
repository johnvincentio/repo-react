{"ast":null,"code":"var _jsxFileName = \"/Users/jv/Desktop/MyDevelopment/github/repo-react/dnd/kanban/kanban-dashboard/src/pages/[projectId].tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useCallback } from 'react';\nimport { useAsync } from 'react-async-hook';\nimport { useRouter } from 'next/router';\nimport { useServiceClient } from '../service';\nimport { Dashboard } from '../dashboard';\nimport { ErrorPage } from '../components/error-page';\nvar errMsg = \"The project failed to load or does not exist\";\nexport default function DashboardPage() {\n  _s();\n\n  var router = useRouter();\n  var projectId = router.query.projectId;\n  var service = useServiceClient();\n\n  var _useAsync = useAsync(service.getProject.bind(service), [projectId]),\n      error = _useAsync.error,\n      loading = _useAsync.loading,\n      result = _useAsync.result;\n\n  var updateProjectData = useCallback(function (projectData) {\n    return service.updateProjectData(projectId, projectData);\n  }, [service, projectId]);\n\n  if (loading) {\n    return __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 12\n      }\n    }, \"Loading...\");\n  }\n\n  if (error) {\n    return __jsx(ErrorPage, {\n      message: errMsg,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 12\n      }\n    });\n  }\n\n  if (!result) {\n    return __jsx(ErrorPage, {\n      message: errMsg,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 12\n      }\n    });\n  }\n\n  return __jsx(Dashboard, {\n    state: result.data,\n    updateProjectData: updateProjectData,\n    title: result.meta.title,\n    projectsUrlPath: \"/\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }\n  });\n}\n\n_s(DashboardPage, \"cc0aSAWpOAS6Fa/IRdb1uKYFTmg=\", false, function () {\n  return [useRouter, useServiceClient, useAsync];\n});\n\n_c = DashboardPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"DashboardPage\");","map":{"version":3,"sources":["/Users/jv/Desktop/MyDevelopment/github/repo-react/dnd/kanban/kanban-dashboard/src/pages/[projectId].tsx"],"names":["React","useCallback","useAsync","useRouter","useServiceClient","Dashboard","ErrorPage","errMsg","DashboardPage","router","projectId","query","service","getProject","bind","error","loading","result","updateProjectData","projectData","data","meta","title"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,QAAmC,OAAnC;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,SAASC,SAAT,QAA0B,aAA1B;AAEA,SAASC,gBAAT,QAAiC,YAAjC;AACA,SAASC,SAAT,QAA0B,cAA1B;AAEA,SAASC,SAAT,QAA0B,0BAA1B;AAEA,IAAMC,MAAM,GAAG,8CAAf;AAEA,eAAe,SAASC,aAAT,GAAyB;AAAA;;AACtC,MAAMC,MAAM,GAAGN,SAAS,EAAxB;AACA,MAAMO,SAAS,GAAGD,MAAM,CAACE,KAAP,CAAaD,SAA/B;AAEA,MAAME,OAAO,GAAGR,gBAAgB,EAAhC;;AAJsC,kBAKHF,QAAQ,CAAeU,OAAO,CAACC,UAAR,CAAmBC,IAAnB,CAAwBF,OAAxB,CAAf,EAAiD,CAACF,SAAD,CAAjD,CALL;AAAA,MAK9BK,KAL8B,aAK9BA,KAL8B;AAAA,MAKvBC,OALuB,aAKvBA,OALuB;AAAA,MAKdC,MALc,aAKdA,MALc;;AAOtC,MAAMC,iBAAiB,GAAGjB,WAAW,CAAC,UAACkB,WAAD,EAA8B;AAClE,WAAOP,OAAO,CAACM,iBAAR,CAA0BR,SAA1B,EAAqCS,WAArC,CAAP;AACD,GAFoC,EAElC,CAACP,OAAD,EAAUF,SAAV,CAFkC,CAArC;;AAIA,MAAIM,OAAJ,EAAa;AACX,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAP;AACD;;AAED,MAAID,KAAJ,EAAW;AACT,WAAO,MAAC,SAAD;AAAW,MAAA,OAAO,EAAER,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AAED,MAAI,CAACU,MAAL,EAAa;AACX,WAAO,MAAC,SAAD;AAAW,MAAA,OAAO,EAAEV,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AAED,SACE,MAAC,SAAD;AACE,IAAA,KAAK,EAAEU,MAAM,CAACG,IADhB;AAEE,IAAA,iBAAiB,EAAEF,iBAFrB;AAGE,IAAA,KAAK,EAAED,MAAM,CAACI,IAAP,CAAYC,KAHrB;AAIE,IAAA,eAAe,EAAC,GAJlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAQD;;GA/BuBd,a;UACPL,S,EAGCC,gB,EACmBF,Q;;;KALbM,a","sourcesContent":["import React, { useCallback } from 'react';\nimport { useAsync } from 'react-async-hook';\nimport { useRouter } from 'next/router';\n\nimport { useServiceClient } from '../service';\nimport { Dashboard } from '../dashboard';\nimport { Project as ProjectState, ProjectData } from '../dashboard/store/types';\nimport { ErrorPage } from '../components/error-page';\n\nconst errMsg = \"The project failed to load or does not exist\";\n\nexport default function DashboardPage() {\n  const router = useRouter();\n  const projectId = router.query.projectId as string;\n\n  const service = useServiceClient();\n  const { error, loading, result } = useAsync<ProjectState>(service.getProject.bind(service), [projectId]);\n\n  const updateProjectData = useCallback((projectData: ProjectData) => {\n    return service.updateProjectData(projectId, projectData);\n  }, [service, projectId]);\n\n  if (loading) {\n    return <p>Loading...</p>\n  }\n\n  if (error) {\n    return <ErrorPage message={errMsg} />\n  }\n\n  if (!result) {\n    return <ErrorPage message={errMsg} />\n  }\n\n  return (\n    <Dashboard\n      state={result.data}\n      updateProjectData={updateProjectData}\n      title={result.meta.title}\n      projectsUrlPath=\"/\"\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}