{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nconst {\n  v4: uuid\n} = require('uuid');\n\nexport const makeUser = (user = {}) => {\n  return _objectSpread({\n    id: user.id || uuid(),\n    username: user.username || ''\n  }, user);\n};\nexport const makeTask = (task = {}) => {\n  return {\n    id: task.id || uuid(),\n    title: task.title || '',\n    description: task.description || '',\n    statusId: task.statusId || '',\n    tagIds: task.tagIds || [],\n    creatorId: task.creatorId || '',\n    assigneeId: task.assigneeId,\n    rootCommentIds: task.rootCommentIds || []\n  };\n};\nexport const makeStatus = (status = {}) => {\n  return {\n    id: status.id || uuid(),\n    title: status.title || '',\n    taskIds: status.taskIds || []\n  };\n};\nexport const makeTag = tag => {\n  return {\n    id: tag.id || uuid(),\n    value: tag.value || '',\n    taskIds: tag.taskIds || []\n  };\n};\nexport const makeComment = comment => {\n  return {\n    id: comment.id || uuid(),\n    creatorId: comment.creatorId || '',\n    value: comment.value || '',\n    taskId: '',\n    parentCommentId: '',\n    childCommentIds: [],\n    ts: comment.ts || null\n  };\n};","map":{"version":3,"sources":["/Users/jv/Desktop/MyDevelopment/github/repo-react/dnd/kanban/kanban-dashboard/src/dashboard/store/factory.ts"],"names":["v4","uuid","require","makeUser","user","id","username","makeTask","task","title","description","statusId","tagIds","creatorId","assigneeId","rootCommentIds","makeStatus","status","taskIds","makeTag","tag","value","makeComment","comment","taskId","parentCommentId","childCommentIds","ts"],"mappings":";;;;;;AACA,MAAM;AAAEA,EAAAA,EAAE,EAAEC;AAAN,IAAeC,OAAO,CAAC,MAAD,CAA5B;;AAEA,OAAO,MAAMC,QAAQ,GAAG,CAACC,IAAmB,GAAG,EAAvB,KAAoC;AAC1D;AACEC,IAAAA,EAAE,EAAED,IAAI,CAACC,EAAL,IAAWJ,IAAI,EADrB;AAEEK,IAAAA,QAAQ,EAAEF,IAAI,CAACE,QAAL,IAAiB;AAF7B,KAGKF,IAHL;AAKD,CANM;AAQP,OAAO,MAAMG,QAAQ,GAAG,CAACC,IAAmB,GAAG,EAAvB,KAAoC;AAC1D,SAAO;AACLH,IAAAA,EAAE,EAAEG,IAAI,CAACH,EAAL,IAAWJ,IAAI,EADd;AAELQ,IAAAA,KAAK,EAAED,IAAI,CAACC,KAAL,IAAc,EAFhB;AAGLC,IAAAA,WAAW,EAAEF,IAAI,CAACE,WAAL,IAAoB,EAH5B;AAILC,IAAAA,QAAQ,EAAEH,IAAI,CAACG,QAAL,IAAiB,EAJtB;AAKLC,IAAAA,MAAM,EAAEJ,IAAI,CAACI,MAAL,IAAe,EALlB;AAMLC,IAAAA,SAAS,EAAEL,IAAI,CAACK,SAAL,IAAkB,EANxB;AAOLC,IAAAA,UAAU,EAAEN,IAAI,CAACM,UAPZ;AAQLC,IAAAA,cAAc,EAAEP,IAAI,CAACO,cAAL,IAAuB;AARlC,GAAP;AAUD,CAXM;AAaP,OAAO,MAAMC,UAAU,GAAG,CAACC,MAAuB,GAAG,EAA3B,KAA0C;AAClE,SAAO;AACLZ,IAAAA,EAAE,EAAEY,MAAM,CAACZ,EAAP,IAAaJ,IAAI,EADhB;AAELQ,IAAAA,KAAK,EAAEQ,MAAM,CAACR,KAAP,IAAgB,EAFlB;AAGLS,IAAAA,OAAO,EAAED,MAAM,CAACC,OAAP,IAAkB;AAHtB,GAAP;AAKD,CANM;AAQP,OAAO,MAAMC,OAAO,GAAIC,GAAD,IAA4B;AACjD,SAAO;AACLf,IAAAA,EAAE,EAAEe,GAAG,CAACf,EAAJ,IAAUJ,IAAI,EADb;AAELoB,IAAAA,KAAK,EAAED,GAAG,CAACC,KAAJ,IAAa,EAFf;AAGLH,IAAAA,OAAO,EAAEE,GAAG,CAACF,OAAJ,IAAe;AAHnB,GAAP;AAKD,CANM;AAOP,OAAO,MAAMI,WAAW,GAAIC,OAAD,IAAwC;AACjE,SAAO;AACLlB,IAAAA,EAAE,EAAEkB,OAAO,CAAClB,EAAR,IAAcJ,IAAI,EADjB;AAELY,IAAAA,SAAS,EAAEU,OAAO,CAACV,SAAR,IAAqB,EAF3B;AAGLQ,IAAAA,KAAK,EAAEE,OAAO,CAACF,KAAR,IAAiB,EAHnB;AAILG,IAAAA,MAAM,EAAE,EAJH;AAKLC,IAAAA,eAAe,EAAE,EALZ;AAMLC,IAAAA,eAAe,EAAE,EANZ;AAOLC,IAAAA,EAAE,EAAEJ,OAAO,CAACI,EAAR,IAAc;AAPb,GAAP;AASD,CAVM","sourcesContent":["import { Status, Task, User, Tag, Comment } from './types';\nconst { v4: uuid } = require('uuid');\n\nexport const makeUser = (user: Partial<User> = {}): User => {\n  return {\n    id: user.id || uuid(),\n    username: user.username || '',\n    ...user\n  };\n};\n\nexport const makeTask = (task: Partial<Task> = {}): Task => {\n  return {\n    id: task.id || uuid(),\n    title: task.title || '',\n    description: task.description || '',\n    statusId: task.statusId || '',\n    tagIds: task.tagIds || [],\n    creatorId: task.creatorId || '',\n    assigneeId: task.assigneeId,\n    rootCommentIds: task.rootCommentIds || [],\n  };\n};\n\nexport const makeStatus = (status: Partial<Status> = {}): Status => {\n  return {\n    id: status.id || uuid(),\n    title: status.title || '',\n    taskIds: status.taskIds || [],\n  };\n};\n\nexport const makeTag = (tag: Partial<Tag>): Tag => {\n  return {\n    id: tag.id || uuid(),\n    value: tag.value || '',\n    taskIds: tag.taskIds || [],\n  };\n};\nexport const makeComment = (comment: Partial<Comment>): Comment => {\n  return {\n    id: comment.id || uuid(),\n    creatorId: comment.creatorId || '',\n    value: comment.value || '',\n    taskId: '',\n    parentCommentId: '',\n    childCommentIds: [],\n    ts: comment.ts || null\n  };\n};\n"]},"metadata":{},"sourceType":"module"}