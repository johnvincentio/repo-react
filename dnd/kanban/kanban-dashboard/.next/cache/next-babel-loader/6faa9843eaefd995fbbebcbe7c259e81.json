{"ast":null,"code":"var _jsxFileName = \"/Users/jv/Desktop/MyDevelopment/github/repo-react/dnd/kanban/kanban-dashboard/src/dashboard/Comment.tsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { Comment as CommentView } from '../components/comment';\nimport { hooks, emptyArray } from './store';\nimport { useCurrentUserId } from './CurrentUser';\nexport default function Comment({\n  id\n}) {\n  const comment = hooks.useComment(id);\n  const createChildComment = hooks.useCreateChildComment();\n  const username = hooks.useCommentUsername(id);\n  const currentUserId = useCurrentUserId();\n\n  if (!comment) {\n    return null;\n  }\n\n  const {\n    value,\n    childCommentIds\n  } = comment;\n\n  const handleSubmitReply = (value, ts) => {\n    createChildComment({\n      value,\n      parentCommentId: id,\n      creatorId: currentUserId,\n      ts\n    });\n  };\n\n  const childCommentsElement = __jsx(React.Fragment, null, (childCommentIds || emptyArray).map(childId => __jsx(Comment, {\n    key: childId,\n    id: childId,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 55\n    }\n  })));\n\n  return __jsx(CommentView, {\n    username: username,\n    value: value,\n    childComments: childCommentsElement,\n    onSubmitReply: handleSubmitReply,\n    ts: comment.ts,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }\n  });\n}","map":{"version":3,"sources":["/Users/jv/Desktop/MyDevelopment/github/repo-react/dnd/kanban/kanban-dashboard/src/dashboard/Comment.tsx"],"names":["React","Comment","CommentView","hooks","emptyArray","useCurrentUserId","id","comment","useComment","createChildComment","useCreateChildComment","username","useCommentUsername","currentUserId","value","childCommentIds","handleSubmitReply","ts","parentCommentId","creatorId","childCommentsElement","map","childId"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,OAAO,IAAIC,WAApB,QAAuC,uBAAvC;AACA,SAASC,KAAT,EAAgBC,UAAhB,QAAkC,SAAlC;AACA,SAASC,gBAAT,QAAiC,eAAjC;AAOA,eAAe,SAASJ,OAAT,CAAiB;AAAEK,EAAAA;AAAF,CAAjB,EAAgC;AAC7C,QAAMC,OAAO,GAAGJ,KAAK,CAACK,UAAN,CAAiBF,EAAjB,CAAhB;AACA,QAAMG,kBAAkB,GAAGN,KAAK,CAACO,qBAAN,EAA3B;AACA,QAAMC,QAAQ,GAAGR,KAAK,CAACS,kBAAN,CAAyBN,EAAzB,CAAjB;AACA,QAAMO,aAAa,GAAGR,gBAAgB,EAAtC;;AAEA,MAAI,CAACE,OAAL,EAAc;AACZ,WAAO,IAAP;AACD;;AAED,QAAM;AAAEO,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAA6BR,OAAnC;;AAEA,QAAMS,iBAAiB,GAAG,CAACF,KAAD,EAAgBG,EAAhB,KAA6B;AACrDR,IAAAA,kBAAkB,CAAC;AAAEK,MAAAA,KAAF;AAASI,MAAAA,eAAe,EAAEZ,EAA1B;AAA8Ba,MAAAA,SAAS,EAAEN,aAAzC;AAAwDI,MAAAA;AAAxD,KAAD,CAAlB;AACD,GAFD;;AAIA,QAAMG,oBAAoB,GACxB,4BAAG,CAACL,eAAe,IAAIX,UAApB,EAAgCiB,GAAhC,CAAoCC,OAAO,IAAI,MAAC,OAAD;AAAS,IAAA,GAAG,EAAEA,OAAd;AAAuB,IAAA,EAAE,EAAEA,OAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAA/C,CAAH,CADF;;AAIA,SACE,MAAC,WAAD;AACE,IAAA,QAAQ,EAAEX,QADZ;AAEE,IAAA,KAAK,EAAEG,KAFT;AAGE,IAAA,aAAa,EAAEM,oBAHjB;AAIE,IAAA,aAAa,EAAEJ,iBAJjB;AAKE,IAAA,EAAE,EAAET,OAAO,CAACU,EALd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AASD","sourcesContent":["import React from 'react';\n\nimport { Comment as CommentView } from '../components/comment';\nimport { hooks, emptyArray } from './store';\nimport { useCurrentUserId } from './CurrentUser';\n\nexport interface Props {\n  id: string,\n  taskId?: string,\n  parentCommentId?: string,\n}\nexport default function Comment({ id }: Props) {\n  const comment = hooks.useComment(id);\n  const createChildComment = hooks.useCreateChildComment();\n  const username = hooks.useCommentUsername(id);\n  const currentUserId = useCurrentUserId();\n\n  if (!comment) {\n    return null;\n  }\n\n  const { value, childCommentIds } = comment;\n\n  const handleSubmitReply = (value: string, ts: Date) => {\n    createChildComment({ value, parentCommentId: id, creatorId: currentUserId, ts });\n  };\n\n  const childCommentsElement = (\n    <>{(childCommentIds || emptyArray).map(childId => <Comment key={childId} id={childId}/>)}</>\n  );\n\n  return (\n    <CommentView\n      username={username}\n      value={value}\n      childComments={childCommentsElement}\n      onSubmitReply={handleSubmitReply}\n      ts={comment.ts}\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}