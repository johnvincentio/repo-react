{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\n\nvar _jsxFileName = \"/Users/jv/Desktop/MyDevelopment/github/repo-react/dnd/kanban/kanban-dashboard/src/dashboard/Project.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport Dialog from '@material-ui/core/Dialog';\nimport Button from '@material-ui/core/Button';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport { hooks, emptyArray } from './store';\nimport { useBoardStyles } from './styles';\nimport StatusEditorForm from './StatusEditorForm';\nimport StatusLane from './StatusLane';\nexport default function Project() {\n  _s();\n\n  var _this = this;\n\n  var statusIds = hooks.useStatusIds();\n  var createStatus = hooks.useCreateStatus();\n  var moveStatus = hooks.useMoveStatus();\n  var moveTask = hooks.useMoveStatusTask();\n\n  var _useState = useState(false),\n      isFormOpen = _useState[0],\n      setIsFormOpen = _useState[1];\n\n  var classNames = useBoardStyles();\n\n  var handleSubmitNewStatus = function handleSubmitNewStatus(title) {\n    if (createStatus) {\n      createStatus({\n        title: title\n      });\n    }\n\n    setIsFormOpen(false);\n  };\n\n  var handleCancelNewStatus = function handleCancelNewStatus() {\n    return setIsFormOpen(false);\n  };\n\n  var handleDragEnd = function handleDragEnd(_ref) {\n    var type = _ref.type,\n        source = _ref.source,\n        destination = _ref.destination,\n        draggableId = _ref.draggableId;\n\n    if (source && destination) {\n      if (type === 'statusLane' && moveStatus) {\n        moveStatus(source.index, destination.index);\n      }\n\n      if (type === 'taskCard' && moveTask) {\n        moveTask(draggableId, source.droppableId, source.index, destination.droppableId, destination.index);\n      }\n    }\n  };\n\n  return __jsx(\"div\", {\n    className: classNames.board,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 5\n    }\n  }, __jsx(DragDropContext, {\n    onDragEnd: handleDragEnd,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }\n  }, createStatus && __jsx(Dialog, {\n    open: isFormOpen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 11\n    }\n  }, __jsx(Paper, {\n    className: classNames.dialog,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }\n  }, __jsx(StatusEditorForm, {\n    onSubmit: handleSubmitNewStatus,\n    onCancel: handleCancelNewStatus,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 15\n    }\n  }))), __jsx(Droppable, {\n    type: \"statusLane\",\n    droppableId: \"projectBoard\",\n    direction: \"horizontal\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }, function (provided) {\n    return __jsx(\"div\", _extends({\n      ref: provided.innerRef\n    }, provided.droppableProps, {\n      className: classNames.lanes,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 15\n      }\n    }), (statusIds || emptyArray).map(function (statusId, index) {\n      return __jsx(Draggable, {\n        key: statusId,\n        draggableId: statusId.toString(),\n        index: index,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 19\n        }\n      }, function (provided) {\n        return __jsx(\"div\", _extends({\n          className: classNames.laneContainer,\n          ref: provided.innerRef\n        }, provided.draggableProps, {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 25\n          }\n        }), __jsx(StatusLane, {\n          id: statusId,\n          dragHandleProps: provided.dragHandleProps,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 27\n          }\n        }));\n      });\n    }), provided.placeholder, __jsx(Button, {\n      className: classNames.newStatusLane,\n      onClick: function onClick() {\n        return setIsFormOpen(true);\n      },\n      variant: \"outlined\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }\n    }, \"Add Column\"));\n  })));\n}\n\n_s(Project, \"W1qtQHm9qrCkleunWxEGH06M19o=\", false, function () {\n  return [hooks.useStatusIds, hooks.useCreateStatus, hooks.useMoveStatus, hooks.useMoveStatusTask, useBoardStyles];\n});\n\n_c = Project;\n\nvar _c;\n\n$RefreshReg$(_c, \"Project\");","map":{"version":3,"sources":["/Users/jv/Desktop/MyDevelopment/github/repo-react/dnd/kanban/kanban-dashboard/src/dashboard/Project.tsx"],"names":["React","useState","Paper","Dialog","Button","DragDropContext","Droppable","Draggable","hooks","emptyArray","useBoardStyles","StatusEditorForm","StatusLane","Project","statusIds","useStatusIds","createStatus","useCreateStatus","moveStatus","useMoveStatus","moveTask","useMoveStatusTask","isFormOpen","setIsFormOpen","classNames","handleSubmitNewStatus","title","handleCancelNewStatus","handleDragEnd","type","source","destination","draggableId","index","droppableId","board","dialog","provided","innerRef","droppableProps","lanes","map","statusId","toString","laneContainer","draggableProps","dragHandleProps","placeholder","newStatusLane"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport Dialog from '@material-ui/core/Dialog';\nimport Button from '@material-ui/core/Button';\nimport {\n  DragDropContext,\n  DropResult,\n  Droppable,\n  DroppableProvided,\n  Draggable,\n  DraggableProvided,\n} from 'react-beautiful-dnd';\n\nimport { hooks, emptyArray } from './store';\nimport { useBoardStyles } from './styles';\nimport StatusEditorForm from './StatusEditorForm';\nimport StatusLane from './StatusLane';\n\nexport default function Project() {\n  const statusIds = hooks.useStatusIds();\n  const createStatus = hooks.useCreateStatus();\n  const moveStatus = hooks.useMoveStatus();\n  const moveTask = hooks.useMoveStatusTask();\n\n  const [isFormOpen, setIsFormOpen] = useState(false);\n  const classNames = useBoardStyles();\n\n  const handleSubmitNewStatus = (title: string) => {\n    if (createStatus) {\n      createStatus({ title });\n    }\n    setIsFormOpen(false);\n  };\n\n  const handleCancelNewStatus = () => setIsFormOpen(false);\n\n  const handleDragEnd = ({ type, source, destination, draggableId }: DropResult) => {\n    if (source && destination) {\n      if (type === 'statusLane' && moveStatus) {\n        moveStatus(source.index, destination.index);\n      }\n\n      if (type === 'taskCard' && moveTask) {\n        moveTask(\n          draggableId,\n          source.droppableId,\n          source.index,\n          destination.droppableId,\n          destination.index\n        )\n      }\n    }\n  };\n\n  return (\n    <div className={classNames.board}>\n      <DragDropContext onDragEnd={handleDragEnd}>\n        {createStatus && (\n          <Dialog open={isFormOpen}>\n            <Paper className={classNames.dialog}>\n              <StatusEditorForm\n                onSubmit={handleSubmitNewStatus}\n                onCancel={handleCancelNewStatus}\n              />\n            </Paper>\n          </Dialog>\n        )}\n\n        <Droppable type=\"statusLane\" droppableId=\"projectBoard\" direction=\"horizontal\">\n          {(provided: DroppableProvided) => {\n            return (\n              <div ref={provided.innerRef} {...provided.droppableProps} className={classNames.lanes}>\n                {(statusIds || emptyArray).map((statusId, index) => (\n                  <Draggable key={statusId} draggableId={statusId.toString()} index={index}>\n                    {(provided: DraggableProvided) => {\n                      return (\n                        <div className={classNames.laneContainer} ref={provided.innerRef} {...provided.draggableProps}>\n                          <StatusLane id={statusId} dragHandleProps={provided.dragHandleProps} />\n                        </div>\n                      )\n                    }}\n                  </Draggable>\n                ))}\n\n                {provided.placeholder}\n\n                <Button\n                  className={classNames.newStatusLane}\n                  onClick={() => setIsFormOpen(true)}\n                  variant=\"outlined\"\n                >Add Column</Button>\n              </div>\n            )\n          }}\n        </Droppable>\n      </DragDropContext>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}