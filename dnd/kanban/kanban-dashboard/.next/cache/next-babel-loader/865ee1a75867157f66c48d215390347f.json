{"ast":null,"code":"import { actionCreators } from './base';\nimport { makeTask, makeUser, makeStatus, makeTag, makeComment } from './factory';\nexport var createUser = function createUser(data) {\n  var user = makeUser(data);\n  return actionCreators.create('user', user.id, user);\n};\nexport var updateUser = function updateUser(id, data) {\n  return actionCreators.update('user', id, data);\n};\nexport var createStatus = function createStatus(data) {\n  var status = makeStatus(data);\n  return actionCreators.create('status', status.id, status);\n};\nexport var updateStatus = function updateStatus(id, status) {\n  return actionCreators.update('status', id, status);\n};\n\nvar commentCascade = function commentCascade() {\n  return {\n    childCommentIds: commentCascade\n  };\n};\n\nexport var deleteStatus = function deleteStatus(id) {\n  var cascade = {\n    taskIds: {\n      rootCommentIds: {\n        childCommentIds: commentCascade\n      }\n    }\n  };\n  return actionCreators[\"delete\"]('status', id, cascade);\n};\nexport var createTask = function createTask(data) {\n  var task = makeTask(data);\n  return actionCreators.batch(actionCreators.create('task', task.id, task), actionCreators.attach('task', task.id, 'creatorId', task.creatorId), actionCreators.attach('task', task.id, 'statusId', task.statusId));\n};\nexport var updateTask = function updateTask(id, task) {\n  return actionCreators.update('task', id, task);\n};\nexport var deleteTask = function deleteTask(id) {\n  var cascade = {\n    rootCommentIds: {\n      childCommentIds: commentCascade\n    }\n  };\n  return actionCreators[\"delete\"]('task', id, cascade);\n};\nexport var assignTask = function assignTask(taskId, userId) {\n  return actionCreators.attach('task', taskId, 'assigneeId', userId);\n};\nexport var unassignTask = function unassignTask(taskId, userId) {\n  return actionCreators.detach('task', taskId, 'assigneeId', userId);\n};\nexport var createTag = function createTag(data) {\n  var tag = makeTag(data);\n  return actionCreators.create('tag', tag.id, tag);\n};\nexport var createRootComment = function createRootComment(data) {\n  var comment = makeComment(data); // a root comment must have a task\n  // so create the comment and attach it to the task\n\n  return actionCreators.batch(actionCreators.create('comment', comment.id, comment), actionCreators.attach('comment', comment.id, 'creatorId', data.creatorId), actionCreators.attach('comment', comment.id, 'taskId', data.taskId));\n};\nexport var createChildComment = function createChildComment(data) {\n  var comment = makeComment(data);\n  return actionCreators.batch(actionCreators.create('comment', comment.id, comment), actionCreators.attach('comment', comment.id, 'creatorId', data.creatorId), actionCreators.attach('comment', comment.id, 'parentCommentId', data.parentCommentId));\n};\nexport var deleteComment = function deleteComment(id) {\n  var cascade = {\n    childCommentIds: commentCascade\n  };\n  return actionCreators[\"delete\"]('comment', id, cascade);\n};\nexport var moveStatus = function moveStatus(src, dest) {\n  return actionCreators.move('status', src, dest);\n};\nexport var moveStatusTask = function moveStatusTask(taskId, srcStatusId, src, destStatusId, dest) {\n  if (srcStatusId === destStatusId) {\n    return actionCreators.moveAttached('status', srcStatusId, 'taskIds', src, dest);\n  } else {\n    return actionCreators.attach('status', destStatusId, 'taskIds', taskId, {\n      index: dest\n    });\n  }\n};","map":{"version":3,"sources":["/Users/jv/Desktop/MyDevelopment/github/repo-react/dnd/kanban/kanban-dashboard/src/dashboard/store/actions.ts"],"names":["actionCreators","makeTask","makeUser","makeStatus","makeTag","makeComment","createUser","data","user","create","id","updateUser","update","createStatus","status","updateStatus","commentCascade","childCommentIds","deleteStatus","cascade","taskIds","rootCommentIds","createTask","task","batch","attach","creatorId","statusId","updateTask","deleteTask","assignTask","taskId","userId","unassignTask","detach","createTag","tag","createRootComment","comment","createChildComment","parentCommentId","deleteComment","moveStatus","src","dest","move","moveStatusTask","srcStatusId","destStatusId","moveAttached","index"],"mappings":"AACA,SAASA,cAAT,QAA+B,QAA/B;AACA,SAASC,QAAT,EAAmBC,QAAnB,EAA6BC,UAA7B,EAAyCC,OAAzC,EAAkDC,WAAlD,QAAqE,WAArE;AAEA,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,IAAD,EAAyB;AACjD,MAAMC,IAAI,GAAGN,QAAQ,CAACK,IAAD,CAArB;AACA,SAAOP,cAAc,CAACS,MAAf,CAAsB,MAAtB,EAA8BD,IAAI,CAACE,EAAnC,EAAuCF,IAAvC,CAAP;AACD,CAHM;AAKP,OAAO,IAAMG,UAAU,GAAG,SAAbA,UAAa,CAACD,EAAD,EAAaH,IAAb,EAA6C;AACrE,SAAOP,cAAc,CAACY,MAAf,CAAsB,MAAtB,EAA8BF,EAA9B,EAAkCH,IAAlC,CAAP;AACD,CAFM;AAIP,OAAO,IAAMM,YAAY,GAAG,SAAfA,YAAe,CAACN,IAAD,EAA0C;AACpE,MAAMO,MAAM,GAAGX,UAAU,CAACI,IAAD,CAAzB;AACA,SAAOP,cAAc,CAACS,MAAf,CAAsB,QAAtB,EAAgCK,MAAM,CAACJ,EAAvC,EAA2CI,MAA3C,CAAP;AACD,CAHM;AAKP,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACL,EAAD,EAAaI,MAAb,EAA4C;AACtE,SAAOd,cAAc,CAACY,MAAf,CAAsB,QAAtB,EAAgCF,EAAhC,EAAoCI,MAApC,CAAP;AACD,CAFM;;AAIP,IAAME,cAAc,GAAG,SAAjBA,cAAiB;AAAA,SAAO;AAAEC,IAAAA,eAAe,EAAED;AAAnB,GAAP;AAAA,CAAvB;;AAEA,OAAO,IAAME,YAAY,GAAG,SAAfA,YAAe,CAACR,EAAD,EAAgB;AAC1C,MAAMS,OAAO,GAAG;AACdC,IAAAA,OAAO,EAAE;AAAEC,MAAAA,cAAc,EAAE;AAAEJ,QAAAA,eAAe,EAAED;AAAnB;AAAlB;AADK,GAAhB;AAGA,SAAOhB,cAAc,UAAd,CAAsB,QAAtB,EAAgCU,EAAhC,EAAoCS,OAApC,CAAP;AACD,CALM;AAOP,OAAO,IAAMG,UAAU,GAAG,SAAbA,UAAa,CAACf,IAAD,EAAyB;AACjD,MAAMgB,IAAI,GAAGtB,QAAQ,CAACM,IAAD,CAArB;AAEA,SAAOP,cAAc,CAACwB,KAAf,CACLxB,cAAc,CAACS,MAAf,CAAsB,MAAtB,EAA8Bc,IAAI,CAACb,EAAnC,EAAuCa,IAAvC,CADK,EAELvB,cAAc,CAACyB,MAAf,CAAsB,MAAtB,EAA8BF,IAAI,CAACb,EAAnC,EAAuC,WAAvC,EAAoDa,IAAI,CAACG,SAAzD,CAFK,EAGL1B,cAAc,CAACyB,MAAf,CAAsB,MAAtB,EAA8BF,IAAI,CAACb,EAAnC,EAAuC,UAAvC,EAAmDa,IAAI,CAACI,QAAxD,CAHK,CAAP;AAKD,CARM;AAUP,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAAClB,EAAD,EAAaa,IAAb,EAA0C;AAClE,SAAOvB,cAAc,CAACY,MAAf,CAAsB,MAAtB,EAA8BF,EAA9B,EAAkCa,IAAlC,CAAP;AACD,CAFM;AAIP,OAAO,IAAMM,UAAU,GAAG,SAAbA,UAAa,CAACnB,EAAD,EAAgB;AACxC,MAAMS,OAAO,GAAG;AAAEE,IAAAA,cAAc,EAAE;AAAEJ,MAAAA,eAAe,EAAED;AAAnB;AAAlB,GAAhB;AACA,SAAOhB,cAAc,UAAd,CAAsB,MAAtB,EAA8BU,EAA9B,EAAkCS,OAAlC,CAAP;AACD,CAHM;AAKP,OAAO,IAAMW,UAAU,GAAG,SAAbA,UAAa,CAACC,MAAD,EAAiBC,MAAjB,EAAoC;AAC5D,SAAOhC,cAAc,CAACyB,MAAf,CAAsB,MAAtB,EAA8BM,MAA9B,EAAsC,YAAtC,EAAoDC,MAApD,CAAP;AACD,CAFM;AAIP,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACF,MAAD,EAAiBC,MAAjB,EAAoC;AAC9D,SAAOhC,cAAc,CAACkC,MAAf,CAAsB,MAAtB,EAA8BH,MAA9B,EAAsC,YAAtC,EAAoDC,MAApD,CAAP;AACD,CAFM;AAIP,OAAO,IAAMG,SAAS,GAAG,SAAZA,SAAY,CAAC5B,IAAD,EAAwB;AAC/C,MAAM6B,GAAG,GAAGhC,OAAO,CAACG,IAAD,CAAnB;AACA,SAAOP,cAAc,CAACS,MAAf,CAAsB,KAAtB,EAA6B2B,GAAG,CAAC1B,EAAjC,EAAqC0B,GAArC,CAAP;AACD,CAHM;AAKP,OAAO,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAAC9B,IAAD,EAA6E;AAC5G,MAAM+B,OAAO,GAAGjC,WAAW,CAACE,IAAD,CAA3B,CAD4G,CAG5G;AACA;;AACA,SAAOP,cAAc,CAACwB,KAAf,CACLxB,cAAc,CAACS,MAAf,CAAsB,SAAtB,EAAiC6B,OAAO,CAAC5B,EAAzC,EAA6C4B,OAA7C,CADK,EAELtC,cAAc,CAACyB,MAAf,CAAsB,SAAtB,EAAiCa,OAAO,CAAC5B,EAAzC,EAA6C,WAA7C,EAA0DH,IAAI,CAACmB,SAA/D,CAFK,EAGL1B,cAAc,CAACyB,MAAf,CAAsB,SAAtB,EAAiCa,OAAO,CAAC5B,EAAzC,EAA6C,QAA7C,EAAuDH,IAAI,CAACwB,MAA5D,CAHK,CAAP;AAKD,CAVM;AAYP,OAAO,IAAMQ,kBAAkB,GAAG,SAArBA,kBAAqB,CAAChC,IAAD,EAAgG;AAChI,MAAM+B,OAAO,GAAGjC,WAAW,CAACE,IAAD,CAA3B;AAEA,SAAOP,cAAc,CAACwB,KAAf,CACLxB,cAAc,CAACS,MAAf,CAAsB,SAAtB,EAAiC6B,OAAO,CAAC5B,EAAzC,EAA6C4B,OAA7C,CADK,EAELtC,cAAc,CAACyB,MAAf,CAAsB,SAAtB,EAAiCa,OAAO,CAAC5B,EAAzC,EAA6C,WAA7C,EAA0DH,IAAI,CAACmB,SAA/D,CAFK,EAGL1B,cAAc,CAACyB,MAAf,CAAsB,SAAtB,EAAiCa,OAAO,CAAC5B,EAAzC,EAA6C,iBAA7C,EAAgEH,IAAI,CAACiC,eAArE,CAHK,CAAP;AAKD,CARM;AAUP,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAAC/B,EAAD,EAAgB;AAC3C,MAAMS,OAAO,GAAG;AAAEF,IAAAA,eAAe,EAAED;AAAnB,GAAhB;AACA,SAAOhB,cAAc,UAAd,CAAsB,SAAtB,EAAiCU,EAAjC,EAAqCS,OAArC,CAAP;AACD,CAHM;AAKP,OAAO,IAAMuB,UAAU,GAAG,SAAbA,UAAa,CAACC,GAAD,EAAcC,IAAd,EAA+B;AACvD,SAAO5C,cAAc,CAAC6C,IAAf,CAAoB,QAApB,EAA8BF,GAA9B,EAAmCC,IAAnC,CAAP;AACD,CAFM;AAIP,OAAO,IAAME,cAAc,GAAG,SAAjBA,cAAiB,CAACf,MAAD,EAAiBgB,WAAjB,EAAsCJ,GAAtC,EAAmDK,YAAnD,EAAyEJ,IAAzE,EAA0F;AACtH,MAAIG,WAAW,KAAKC,YAApB,EAAkC;AAChC,WAAOhD,cAAc,CAACiD,YAAf,CAA4B,QAA5B,EAAsCF,WAAtC,EAAmD,SAAnD,EAA8DJ,GAA9D,EAAmEC,IAAnE,CAAP;AACD,GAFD,MAEO;AACL,WAAO5C,cAAc,CAACyB,MAAf,CAAsB,QAAtB,EAAgCuB,YAAhC,EAA8C,SAA9C,EAAyDjB,MAAzD,EAAiE;AAAEmB,MAAAA,KAAK,EAAEN;AAAT,KAAjE,CAAP;AACD;AACF,CANM","sourcesContent":["import { Task, User, Tag } from './types';\nimport { actionCreators } from './base';\nimport { makeTask, makeUser, makeStatus, makeTag, makeComment } from './factory';\n\nexport const createUser = (data: Partial<User>) => {\n  const user = makeUser(data);\n  return actionCreators.create('user', user.id, user);\n};\n\nexport const updateUser = (id: string, data: { username?: string }) => {\n  return actionCreators.update('user', id, data);\n}\n\nexport const createStatus = (data: { id?: string, title: string }) => {\n  const status = makeStatus(data);\n  return actionCreators.create('status', status.id, status);\n};\n\nexport const updateStatus = (id: string, status: { title?: string }) => {\n  return actionCreators.update('status', id, status);\n};\n\nconst commentCascade = () => ({ childCommentIds: commentCascade })\n\nexport const deleteStatus = (id: string) => {\n  const cascade = {\n    taskIds: { rootCommentIds: { childCommentIds: commentCascade } }\n  };\n  return actionCreators.delete('status', id, cascade);\n};\n\nexport const createTask = (data: Partial<Task>) => {\n  const task = makeTask(data);\n\n  return actionCreators.batch(\n    actionCreators.create('task', task.id, task),\n    actionCreators.attach('task', task.id, 'creatorId', task.creatorId),\n    actionCreators.attach('task', task.id, 'statusId', task.statusId),\n  );\n};\n\nexport const updateTask = (id: string, task: { title?: string }) => {\n  return actionCreators.update('task', id, task);\n};\n\nexport const deleteTask = (id: string) => {\n  const cascade = { rootCommentIds: { childCommentIds: commentCascade } };\n  return actionCreators.delete('task', id, cascade);\n};\n\nexport const assignTask = (taskId: string, userId: string) => {\n  return actionCreators.attach('task', taskId, 'assigneeId', userId);\n};\n\nexport const unassignTask = (taskId: string, userId: string) => {\n  return actionCreators.detach('task', taskId, 'assigneeId', userId);\n};\n\nexport const createTag = (data: Partial<Tag>) => {\n  const tag = makeTag(data);\n  return actionCreators.create('tag', tag.id, tag);\n};\n\nexport const createRootComment = (data: { id?: string, taskId: string, value: string, creatorId: string }) => {\n  const comment = makeComment(data);\n\n  // a root comment must have a task\n  // so create the comment and attach it to the task\n  return actionCreators.batch(\n    actionCreators.create('comment', comment.id, comment),\n    actionCreators.attach('comment', comment.id, 'creatorId', data.creatorId),\n    actionCreators.attach('comment', comment.id, 'taskId', data.taskId)\n  );\n};\n\nexport const createChildComment = (data: { id?: string, parentCommentId: string, value: string, creatorId: string, ts: Date }) => {\n  const comment = makeComment(data);\n\n  return actionCreators.batch(\n    actionCreators.create('comment', comment.id, comment),\n    actionCreators.attach('comment', comment.id, 'creatorId', data.creatorId),\n    actionCreators.attach('comment', comment.id, 'parentCommentId', data.parentCommentId)\n  );\n};\n\nexport const deleteComment = (id: string) => {\n  const cascade = { childCommentIds: commentCascade };\n  return actionCreators.delete('comment', id, cascade);\n};\n\nexport const moveStatus = (src: number, dest: number) => {\n  return actionCreators.move('status', src, dest);\n};\n\nexport const moveStatusTask = (taskId: string, srcStatusId: string, src: number, destStatusId: string, dest: number) => {\n  if (srcStatusId === destStatusId) {\n    return actionCreators.moveAttached('status', srcStatusId, 'taskIds', src, dest);\n  } else {\n    return actionCreators.attach('status', destStatusId, 'taskIds', taskId, { index: dest })\n  }\n};\n"]},"metadata":{},"sourceType":"module"}