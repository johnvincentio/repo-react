{"ast":null,"code":"import { v4 as uuid } from 'uuid';\nimport { emptyProjectData } from '../dashboard/store';\nimport { createBoilerplateState } from './boilerplate';\nimport starterData from './starter-data';\nconst localStorageKey = 'kanban_dashboard_projects';\nexport class LocalStorageServiceClient {\n  async getUserProjectsMeta() {\n    const projects = await this.getProjects();\n    return Object.values(projects).map(project => project.meta);\n  }\n\n  async createProject(title, description, boilerplate) {\n    const id = uuid();\n    const data = boilerplate ? createBoilerplateState() : emptyProjectData;\n    const project = {\n      meta: {\n        id,\n        title,\n        description,\n        ts: new Date()\n      },\n      data\n    };\n    await this.putProject(id, project);\n    return id;\n  }\n\n  async getProject(id) {\n    const projects = await this.getProjects();\n    return projects[id];\n  }\n\n  async updateProject(id, project) {\n    const existing = await this.getProject(id);\n\n    if (!existing) {\n      throw new Error(`project ${id} does not exist`);\n    }\n\n    return this.putProject(id, project);\n  }\n\n  async updateProjectData(id, projectData) {\n    const project = await this.getProject(id);\n\n    if (!project) {\n      throw new Error(`project ${id} does not exist`);\n    }\n\n    project.data = projectData;\n    return this.putProject(id, project);\n  }\n\n  async deleteProject(id) {\n    const projects = await this.getProjects();\n    delete projects[id];\n    const persistable = JSON.stringify(projects);\n    localStorage.setItem(localStorageKey, persistable);\n  }\n\n  async getProjects() {\n    let persistable = localStorage.getItem(localStorageKey);\n    return persistable ? JSON.parse(persistable) : starterData;\n  }\n\n  async putProject(id, project) {\n    const projects = await this.getProjects();\n    projects[id] = project;\n    const persistable = JSON.stringify(projects);\n    localStorage.setItem(localStorageKey, persistable);\n  }\n\n}","map":{"version":3,"sources":["/Users/jv/Desktop/MyDevelopment/github/repo-react/dnd/kanban/kanban-dashboard/src/service/client.ts"],"names":["v4","uuid","emptyProjectData","createBoilerplateState","starterData","localStorageKey","LocalStorageServiceClient","getUserProjectsMeta","projects","getProjects","Object","values","map","project","meta","createProject","title","description","boilerplate","id","data","ts","Date","putProject","getProject","updateProject","existing","Error","updateProjectData","projectData","deleteProject","persistable","JSON","stringify","localStorage","setItem","getItem","parse"],"mappings":"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","sourcesContent":["import { v4 as uuid } from 'uuid';\nimport { emptyProjectData } from '../dashboard/store';\nimport { Project, ProjectData, ProjectMeta } from '../dashboard/store/types';\nimport { createBoilerplateState } from './boilerplate';\nimport starterData from './starter-data';\n\nconst localStorageKey = 'kanban_dashboard_projects';\n\nexport interface ServiceClient {\n  getUserProjectsMeta(): Promise<ProjectMeta[]>\n  createProject(title: string, description: string, boilderplate: boolean): Promise<string>\n  getProject(id: string): Promise<Project>\n  updateProject(id: string, project: Project): Promise<void>\n  deleteProject(id: string): Promise<void>\n}\n\nexport class LocalStorageServiceClient implements ServiceClient{\n  async getUserProjectsMeta() {\n    const projects = await this.getProjects();\n    return Object.values(projects).map((project: Project) => project.meta);\n  }\n\n  async createProject(title: string, description: string, boilerplate: boolean) {\n    const id = uuid();\n    const data = boilerplate ? createBoilerplateState() : emptyProjectData;\n\n    const project: Project = {\n      meta: { id, title, description, ts: new Date() },\n      data\n    };\n\n    await this.putProject(id, project);\n\n    return id;\n  }\n\n  async getProject(id: string): Promise<Project> {\n    const projects = await this.getProjects();\n    return projects[id];\n  }\n\n  async updateProject(id: string, project: Project) {\n    const existing = await this.getProject(id);\n    if (!existing) {\n      throw new Error(`project ${id} does not exist`);\n    }\n\n    return this.putProject(id, project);\n  }\n\n  async updateProjectData(id: string, projectData: ProjectData) {\n    const project = await this.getProject(id);\n    if (!project) {\n      throw new Error(`project ${id} does not exist`);\n    }\n\n    project.data = projectData;\n\n    return this.putProject(id, project);\n  }\n\n  async deleteProject(id: string) {\n    const projects = await this.getProjects();\n    delete projects[id];\n    const persistable = JSON.stringify(projects);\n    localStorage.setItem(localStorageKey, persistable);\n  }\n\n  private async getProjects(): Promise<Record<string, Project>> {\n    let persistable = localStorage.getItem(localStorageKey);\n\n    return persistable\n      ? JSON.parse(persistable)\n      : starterData\n  }\n\n  private async putProject(id: string, project: Project) {\n    const projects = await this.getProjects();\n    projects[id] = project;\n    const persistable = JSON.stringify(projects);\n    localStorage.setItem(localStorageKey, persistable)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}