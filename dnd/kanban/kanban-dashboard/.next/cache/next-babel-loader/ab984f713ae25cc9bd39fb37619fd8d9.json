{"ast":null,"code":"var _jsxFileName = \"/Users/jv/Desktop/MyDevelopment/github/repo-react/dnd/kanban/kanban-dashboard/src/components/projects-menu/ProjectCreatorForm.tsx\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport { useRouter } from 'next/router';\nimport { useAsyncCallback } from 'react-async-hook';\nimport TextField from '@material-ui/core/TextField';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport { ConfirmationButtons } from '../buttons';\nimport { useServiceClient } from '../../service';\nexport default function ProjectCreatorForm({\n  onCancel\n}) {\n  const service = useServiceClient();\n  const router = useRouter();\n  const {\n    0: title,\n    1: setTitle\n  } = useState('');\n  const {\n    0: description,\n    1: setDescription\n  } = useState('');\n  const {\n    0: boilerplate,\n    1: setBoilerplate\n  } = useState(true);\n\n  const handleChangeBoilerplate = (e, value) => setBoilerplate(value);\n\n  const handleCancel = () => {\n    setTitle('');\n    setDescription('');\n    onCancel();\n  };\n\n  const {\n    execute,\n    loading,\n    error,\n    result: createdId\n  } = useAsyncCallback(service.createProject.bind(service));\n\n  if (createdId) {\n    router.push(`/${createdId}`);\n    return null;\n  }\n\n  const handleConfirm = () => {\n    const cleanedTitle = title.trim();\n    const cleanedDescription = description.trim();\n\n    if (!!cleanedTitle) {\n      execute(cleanedTitle, cleanedDescription, boilerplate);\n      setTitle('');\n      setDescription('');\n    }\n  };\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }\n  }, __jsx(TextField, {\n    autoFocus: true,\n    placeholder: \"Title\",\n    size: \"medium\",\n    value: title,\n    onChange: e => setTitle(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  }), __jsx(TextField, {\n    fullWidth: true,\n    placeholder: \"Description\",\n    size: \"medium\",\n    value: description,\n    onChange: e => setDescription(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }), __jsx(FormControlLabel, {\n    control: __jsx(Checkbox, {\n      checked: boilerplate,\n      onChange: handleChangeBoilerplate,\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }\n    }),\n    label: \"Use basic kanban template\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }), __jsx(ConfirmationButtons, {\n    onCancel: handleCancel,\n    onConfirm: handleConfirm,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }\n  }), loading && __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 19\n    }\n  }, \"Creating ...\"), error && __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 17\n    }\n  }, \"Error\"));\n}","map":{"version":3,"sources":["/Users/jv/Desktop/MyDevelopment/github/repo-react/dnd/kanban/kanban-dashboard/src/components/projects-menu/ProjectCreatorForm.tsx"],"names":["React","useState","useRouter","useAsyncCallback","TextField","FormControlLabel","Checkbox","ConfirmationButtons","useServiceClient","ProjectCreatorForm","onCancel","service","router","title","setTitle","description","setDescription","boilerplate","setBoilerplate","handleChangeBoilerplate","e","value","handleCancel","execute","loading","error","result","createdId","createProject","bind","push","handleConfirm","cleanedTitle","trim","cleanedDescription","target"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { useRouter } from 'next/router';\nimport { useAsyncCallback } from 'react-async-hook';\nimport TextField from '@material-ui/core/TextField';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\n\nimport { ConfirmationButtons } from '../buttons';\nimport { useServiceClient } from '../../service';\n\nexport interface Props {\n  onCancel: () => void\n}\nexport default function ProjectCreatorForm({ onCancel }: Props) {\n  const service = useServiceClient();\n  const router = useRouter();\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [boilerplate, setBoilerplate] = useState(true);\n\n  const handleChangeBoilerplate = (e, value) => setBoilerplate(value);\n\n  const handleCancel = () => {\n    setTitle('');\n    setDescription('');\n    onCancel();\n  }\n\n  const { execute, loading, error, result: createdId } = useAsyncCallback(service.createProject.bind(service));\n\n  if (createdId) {\n    router.push(`/${createdId}`);\n    return null;\n  }\n\n  const handleConfirm = () => {\n    const cleanedTitle = title.trim();\n    const cleanedDescription = description.trim();\n    if (!!cleanedTitle) {\n      execute(cleanedTitle, cleanedDescription, boilerplate);\n      setTitle('');\n      setDescription('');\n    }\n  };\n\n  return (\n    <div>\n      <TextField\n        autoFocus\n        placeholder=\"Title\"\n        size=\"medium\"\n        value={title}\n        onChange={e => setTitle(e.target.value)}\n      />\n\n      <TextField\n        fullWidth\n        placeholder=\"Description\"\n        size=\"medium\"\n        value={description}\n        onChange={e => setDescription(e.target.value)}\n      />\n\n      <FormControlLabel\n        control={\n          <Checkbox\n            checked={boilerplate}\n            onChange={handleChangeBoilerplate}\n            color=\"primary\"\n          />\n        }\n        label=\"Use basic kanban template\"\n      />\n\n      <ConfirmationButtons onCancel={handleCancel} onConfirm={handleConfirm} />\n\n      {loading && <span>Creating ...</span>}\n      {error && <span>Error</span>}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}