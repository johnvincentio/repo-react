{"ast":null,"code":"var _jsxFileName = \"/Users/jv/Desktop/MyDevelopment/github/repo-react/dnd/kanban/kanban-dashboard/src/components/projects-menu/ProjectCreatorForm.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport { useRouter } from 'next/router';\nimport { useAsyncCallback } from 'react-async-hook';\nimport TextField from '@material-ui/core/TextField';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport { ConfirmationButtons } from '../buttons';\nimport { useServiceClient } from '../../service';\nexport default function ProjectCreatorForm(_ref) {\n  _s();\n\n  var onCancel = _ref.onCancel;\n  var service = useServiceClient();\n  var router = useRouter();\n\n  var _useState = useState(''),\n      title = _useState[0],\n      setTitle = _useState[1];\n\n  var _useState2 = useState(''),\n      description = _useState2[0],\n      setDescription = _useState2[1];\n\n  var _useState3 = useState(true),\n      boilerplate = _useState3[0],\n      setBoilerplate = _useState3[1];\n\n  var handleChangeBoilerplate = function handleChangeBoilerplate(e, value) {\n    return setBoilerplate(value);\n  };\n\n  var handleCancel = function handleCancel() {\n    setTitle('');\n    setDescription('');\n    onCancel();\n  };\n\n  var _useAsyncCallback = useAsyncCallback(service.createProject.bind(service)),\n      execute = _useAsyncCallback.execute,\n      loading = _useAsyncCallback.loading,\n      error = _useAsyncCallback.error,\n      createdId = _useAsyncCallback.result;\n\n  if (createdId) {\n    router.push(\"/\".concat(createdId));\n    return null;\n  }\n\n  var handleConfirm = function handleConfirm() {\n    var cleanedTitle = title.trim();\n    var cleanedDescription = description.trim();\n\n    if (!!cleanedTitle) {\n      execute(cleanedTitle, cleanedDescription, boilerplate);\n      setTitle('');\n      setDescription('');\n    }\n  };\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }\n  }, __jsx(TextField, {\n    autoFocus: true,\n    placeholder: \"Title\",\n    size: \"medium\",\n    value: title,\n    onChange: function onChange(e) {\n      return setTitle(e.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  }), __jsx(TextField, {\n    fullWidth: true,\n    placeholder: \"Description\",\n    size: \"medium\",\n    value: description,\n    onChange: function onChange(e) {\n      return setDescription(e.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }), __jsx(FormControlLabel, {\n    control: __jsx(Checkbox, {\n      checked: boilerplate,\n      onChange: handleChangeBoilerplate,\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }\n    }),\n    label: \"Use basic kanban template\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }), __jsx(ConfirmationButtons, {\n    onCancel: handleCancel,\n    onConfirm: handleConfirm,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }\n  }), loading && __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 19\n    }\n  }, \"Creating ...\"), error && __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 17\n    }\n  }, \"Error\"));\n}\n\n_s(ProjectCreatorForm, \"SsCWQIjD4Xel74+LGMlbcpilqYY=\", false, function () {\n  return [useServiceClient, useRouter, useAsyncCallback];\n});\n\n_c = ProjectCreatorForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProjectCreatorForm\");","map":{"version":3,"sources":["/Users/jv/Desktop/MyDevelopment/github/repo-react/dnd/kanban/kanban-dashboard/src/components/projects-menu/ProjectCreatorForm.tsx"],"names":["React","useState","useRouter","useAsyncCallback","TextField","FormControlLabel","Checkbox","ConfirmationButtons","useServiceClient","ProjectCreatorForm","onCancel","service","router","title","setTitle","description","setDescription","boilerplate","setBoilerplate","handleChangeBoilerplate","e","value","handleCancel","createProject","bind","execute","loading","error","createdId","result","push","handleConfirm","cleanedTitle","trim","cleanedDescription","target"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { useRouter } from 'next/router';\nimport { useAsyncCallback } from 'react-async-hook';\nimport TextField from '@material-ui/core/TextField';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\n\nimport { ConfirmationButtons } from '../buttons';\nimport { useServiceClient } from '../../service';\n\nexport interface Props {\n  onCancel: () => void\n}\nexport default function ProjectCreatorForm({ onCancel }: Props) {\n  const service = useServiceClient();\n  const router = useRouter();\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [boilerplate, setBoilerplate] = useState(true);\n\n  const handleChangeBoilerplate = (e, value) => setBoilerplate(value);\n\n  const handleCancel = () => {\n    setTitle('');\n    setDescription('');\n    onCancel();\n  }\n\n  const { execute, loading, error, result: createdId } = useAsyncCallback(service.createProject.bind(service));\n\n  if (createdId) {\n    router.push(`/${createdId}`);\n    return null;\n  }\n\n  const handleConfirm = () => {\n    const cleanedTitle = title.trim();\n    const cleanedDescription = description.trim();\n    if (!!cleanedTitle) {\n      execute(cleanedTitle, cleanedDescription, boilerplate);\n      setTitle('');\n      setDescription('');\n    }\n  };\n\n  return (\n    <div>\n      <TextField\n        autoFocus\n        placeholder=\"Title\"\n        size=\"medium\"\n        value={title}\n        onChange={e => setTitle(e.target.value)}\n      />\n\n      <TextField\n        fullWidth\n        placeholder=\"Description\"\n        size=\"medium\"\n        value={description}\n        onChange={e => setDescription(e.target.value)}\n      />\n\n      <FormControlLabel\n        control={\n          <Checkbox\n            checked={boilerplate}\n            onChange={handleChangeBoilerplate}\n            color=\"primary\"\n          />\n        }\n        label=\"Use basic kanban template\"\n      />\n\n      <ConfirmationButtons onCancel={handleCancel} onConfirm={handleConfirm} />\n\n      {loading && <span>Creating ...</span>}\n      {error && <span>Error</span>}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}