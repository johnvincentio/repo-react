{"ast":null,"code":"var _jsxFileName = \"/Users/jv/Desktop/MyDevelopment/github/repo-react/dnd/kanban/kanban-dashboard/src/dashboard/UsersMenu.tsx\";\nvar __jsx = React.createElement;\nimport React, { Fragment, useState } from 'react';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport CurrentUserIcon from '@material-ui/icons/AccountCircle';\nimport NonCurrentUserIcon from '@material-ui/icons/RadioButtonUnchecked';\nimport TextField from '@material-ui/core/TextField';\nimport { hooks } from './store';\nimport { useCurrentUserId, useSetCurrentUserId } from './CurrentUser';\nimport { ConfirmationButtons, EditButton } from '../components/buttons';\nimport { useUserItemStyles, useUserEditorStyles } from './styles';\nexport default function UsersMenu() {\n  const ids = hooks.useUserIds();\n  const createUser = hooks.useCreateUser();\n  const {\n    0: isEditorOpen,\n    1: setIsEditorOpen\n  } = useState(false);\n\n  const openEditor = () => setIsEditorOpen(true);\n\n  const closeEditor = () => setIsEditorOpen(false);\n\n  const submitNewUser = username => {\n    createUser({\n      username\n    });\n    closeEditor();\n  };\n\n  return __jsx(List, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 5\n    }\n  }, __jsx(ListItem, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }\n  }, isEditorOpen ? __jsx(UserEditorForm, {\n    onSubmit: submitNewUser,\n    onCancel: closeEditor,\n    username: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }\n  }) : __jsx(Button, {\n    onClick: openEditor,\n    fullWidth: true,\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }\n  }, \"New User\")), ids.map(id => __jsx(ListItem, {\n    key: id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }\n  }, __jsx(UserItem, {\n    id: id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 11\n    }\n  }))));\n}\nexport function UserItem({\n  id\n}) {\n  const user = hooks.useUser(id);\n  const currentUserId = useCurrentUserId();\n  const setCurrentUserId = useSetCurrentUserId();\n  const updateUser = hooks.useUpdateUser();\n  const {\n    0: isEditing,\n    1: setIsEditing\n  } = useState(false);\n  const classNames = useUserItemStyles();\n  const isCurrentUser = user.id === currentUserId;\n\n  const openEditor = () => setIsEditing(true);\n\n  const closeEditor = () => setIsEditing(false);\n\n  const handleClick = () => setCurrentUserId(user.id);\n\n  const handleUpdateUsername = username => {\n    updateUser(id, {\n      username\n    });\n    closeEditor();\n  };\n\n  const icon = isCurrentUser ? __jsx(CurrentUserIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 32\n    }\n  }) : __jsx(NonCurrentUserIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 53\n    }\n  });\n  const username = isEditing ? __jsx(UserEditorForm, {\n    username: user.username,\n    onCancel: closeEditor,\n    onSubmit: handleUpdateUsername,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  }) : user.username;\n  return __jsx(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 5\n    }\n  }, __jsx(ListItemAvatar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }\n  }, __jsx(IconButton, {\n    onClick: handleClick,\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }\n  }, icon)), __jsx(ListItemText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }\n  }, username), __jsx(\"span\", {\n    className: classNames.editBtn,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }\n  }, __jsx(EditButton, {\n    onClick: openEditor,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }\n  })));\n}\nexport function UserEditorForm({\n  username: initialUsername = '',\n  onSubmit,\n  onCancel\n}) {\n  const {\n    0: value,\n    1: setValue\n  } = useState(initialUsername);\n  const classNames = useUserEditorStyles();\n\n  const handleSubmit = () => {\n    if (value) {\n      onSubmit(value);\n      setValue('');\n    }\n  };\n\n  const handleCancel = () => {\n    onCancel();\n    setValue('');\n  };\n\n  return __jsx(\"div\", {\n    className: classNames.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 5\n    }\n  }, __jsx(TextField, {\n    autoFocus: true,\n    fullWidth: true,\n    placeholder: \"Username\",\n    value: value,\n    onChange: e => setValue(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }\n  }), __jsx(ConfirmationButtons, {\n    onConfirm: handleSubmit,\n    onCancel: handleCancel,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/jv/Desktop/MyDevelopment/github/repo-react/dnd/kanban/kanban-dashboard/src/dashboard/UsersMenu.tsx"],"names":["React","Fragment","useState","List","ListItem","ListItemText","ListItemAvatar","Button","IconButton","CurrentUserIcon","NonCurrentUserIcon","TextField","hooks","useCurrentUserId","useSetCurrentUserId","ConfirmationButtons","EditButton","useUserItemStyles","useUserEditorStyles","UsersMenu","ids","useUserIds","createUser","useCreateUser","isEditorOpen","setIsEditorOpen","openEditor","closeEditor","submitNewUser","username","map","id","UserItem","user","useUser","currentUserId","setCurrentUserId","updateUser","useUpdateUser","isEditing","setIsEditing","classNames","isCurrentUser","handleClick","handleUpdateUsername","icon","editBtn","UserEditorForm","initialUsername","onSubmit","onCancel","value","setValue","handleSubmit","handleCancel","root","e","target"],"mappings":"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","sourcesContent":["import React, { Fragment, useState } from 'react';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport CurrentUserIcon from '@material-ui/icons/AccountCircle';\nimport NonCurrentUserIcon from '@material-ui/icons/RadioButtonUnchecked';\nimport TextField from '@material-ui/core/TextField';\n\nimport { hooks } from './store';\nimport { useCurrentUserId, useSetCurrentUserId } from './CurrentUser';\nimport { ConfirmationButtons, EditButton } from '../components/buttons';\nimport { useUserItemStyles, useUserEditorStyles } from './styles';\n\nexport default function UsersMenu() {\n  const ids = hooks.useUserIds();\n  const createUser = hooks.useCreateUser();\n\n  const [isEditorOpen, setIsEditorOpen] = useState(false);\n  const openEditor = () => setIsEditorOpen(true);\n  const closeEditor = () => setIsEditorOpen(false);\n  const submitNewUser = (username: string) => {\n    createUser({ username });\n    closeEditor();\n  }\n\n  return (\n    <List>\n      <ListItem>\n        {isEditorOpen\n          ? <UserEditorForm onSubmit={submitNewUser} onCancel={closeEditor} username=\"\" />\n          : <Button onClick={openEditor} fullWidth color=\"primary\">New User</Button>\n        }\n      </ListItem>\n      {ids.map(id => (\n        <ListItem key={id}>\n          <UserItem id={id} />\n        </ListItem>\n      ))}\n    </List>\n  );\n}\n\nexport interface UserItemProps {\n  id: string\n}\nexport function UserItem({ id }: UserItemProps) {\n  const user = hooks.useUser(id);\n  const currentUserId = useCurrentUserId();\n  const setCurrentUserId = useSetCurrentUserId();\n  const updateUser = hooks.useUpdateUser();\n  const [isEditing, setIsEditing] = useState(false);\n  const classNames = useUserItemStyles();\n\n  const isCurrentUser =  user.id === currentUserId\n  const openEditor = () => setIsEditing(true);\n  const closeEditor = () => setIsEditing(false);\n  const handleClick = () => setCurrentUserId(user.id);\n  const handleUpdateUsername = (username: string) => {\n    updateUser(id, { username });\n    closeEditor();\n  }\n\n  const icon = isCurrentUser ? <CurrentUserIcon/> : <NonCurrentUserIcon/>;\n\n  const username = isEditing\n    ? (\n      <UserEditorForm\n        username={user.username}\n        onCancel={closeEditor}\n        onSubmit={handleUpdateUsername}\n      />\n    )\n    : user.username;\n\n  return (\n    <Fragment>\n      <ListItemAvatar>\n        <IconButton onClick={handleClick} color=\"primary\">\n          {icon}\n        </IconButton>\n      </ListItemAvatar>\n\n      <ListItemText>{username}</ListItemText>\n\n      <span className={classNames.editBtn}>\n        <EditButton onClick={openEditor} />\n      </span>\n    </Fragment>\n  );\n}\n\nexport interface UserEditorFormProps {\n  username?: string,\n  onSubmit: (username: string) => void,\n  onCancel: () => void\n}\nexport function UserEditorForm({ username: initialUsername = '', onSubmit, onCancel }: UserEditorFormProps) {\n  const [value, setValue] = useState(initialUsername);\n  const classNames = useUserEditorStyles();\n\n  const handleSubmit = () => {\n    if (value) {\n      onSubmit(value);\n      setValue('');\n    }\n  };\n\n  const handleCancel = () => {\n    onCancel();\n    setValue('');\n  };\n\n  return (\n    <div className={classNames.root}>\n      <TextField\n        autoFocus\n        fullWidth\n        placeholder=\"Username\"\n        value={value}\n        onChange={e => setValue(e.target.value)}\n      />\n\n      <ConfirmationButtons onConfirm={handleSubmit} onCancel={handleCancel} />\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}