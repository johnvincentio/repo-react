{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { spawn, takeEvery, call, select } from 'redux-saga/effects';\nimport { actionTypes } from './base';\nexport function makeSaga(updateProjectData) {\n  var _marked = /*#__PURE__*/_regeneratorRuntime.mark(rootSaga),\n      _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchModelActions),\n      _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(handleModelAction);\n\n  function rootSaga() {\n    return _regeneratorRuntime.wrap(function rootSaga$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return spawn(watchModelActions);\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _marked);\n  }\n\n  function watchModelActions() {\n    var _i, _Object$values, actionType;\n\n    return _regeneratorRuntime.wrap(function watchModelActions$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _i = 0, _Object$values = Object.values(actionTypes);\n\n          case 1:\n            if (!(_i < _Object$values.length)) {\n              _context2.next = 8;\n              break;\n            }\n\n            actionType = _Object$values[_i];\n            _context2.next = 5;\n            return takeEvery(actionType, handleModelAction);\n\n          case 5:\n            _i++;\n            _context2.next = 1;\n            break;\n\n          case 8:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _marked2);\n  }\n\n  function handleModelAction() {\n    var projectData;\n    return _regeneratorRuntime.wrap(function handleModelAction$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return select();\n\n          case 2:\n            projectData = _context3.sent;\n            _context3.next = 5;\n            return call(updateProjectData, projectData);\n\n          case 5:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _marked3);\n  }\n\n  return rootSaga;\n}","map":{"version":3,"sources":["/Users/jv/Desktop/MyDevelopment/github/repo-react/dnd/kanban/kanban-dashboard/src/dashboard/store/saga.ts"],"names":["spawn","takeEvery","call","select","actionTypes","makeSaga","updateProjectData","rootSaga","watchModelActions","handleModelAction","Object","values","actionType","projectData"],"mappings":";AAAA,SAASA,KAAT,EAAgBC,SAAhB,EAA2BC,IAA3B,EAAiCC,MAAjC,QAA+C,oBAA/C;AAGA,SAASC,WAAT,QAA4B,QAA5B;AAGA,OAAO,SAASC,QAAT,CAAkBC,iBAAlB,EAAwD;AAAA,sDACnDC,QADmD;AAAA,uDAKnDC,iBALmD;AAAA,uDAWnDC,iBAXmD;;AAC7D,WAAUF,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,mBAAMP,KAAK,CAACQ,iBAAD,CAAX;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,WAAUA,iBAAV;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,qCACyBE,MAAM,CAACC,MAAP,CAAcP,WAAd,CADzB;;AAAA;AAAA;AAAA;AAAA;AAAA;;AACWQ,YAAAA,UADX;AAAA;AAEI,mBAAMX,SAAS,CAACW,UAAD,EAAaH,iBAAb,CAAf;;AAFJ;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAMA,WAAUA,iBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACsB,mBAAMN,MAAM,EAAZ;;AADtB;AACQU,YAAAA,WADR;AAAA;AAEE,mBAAMX,IAAI,CAACI,iBAAD,EAAoBO,WAApB,CAAV;;AAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKA,SAAON,QAAP;AACD","sourcesContent":["import { spawn, takeEvery, call, select } from 'redux-saga/effects';\nimport { CreateAction } from 'normalized-reducer';\n\nimport { actionTypes } from './base';\nimport { UpdateProjectData } from './types';\n\nexport function makeSaga(updateProjectData: UpdateProjectData) {\n  function* rootSaga() {\n    yield spawn(watchModelActions);\n  }\n\n  function* watchModelActions() {\n    for (let actionType of Object.values(actionTypes)) {\n      yield takeEvery(actionType, handleModelAction);\n    }\n  }\n\n  function* handleModelAction() {\n    const projectData = yield select();\n    yield call(updateProjectData, projectData)\n  }\n\n  return rootSaga;\n}\n"]},"metadata":{},"sourceType":"module"}