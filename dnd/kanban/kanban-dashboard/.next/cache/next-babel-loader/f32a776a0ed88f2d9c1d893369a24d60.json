{"ast":null,"code":"var _jsxFileName = \"/Users/jv/Desktop/MyDevelopment/github/repo-react/dnd/kanban/kanban-dashboard/src/dashboard/TaskDetails.tsx\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport Dialog from '@material-ui/core/Dialog';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport { EditButton, CloseButton, TextButton } from '../components/buttons';\nimport { NewComment } from '../components/comment';\nimport { hooks } from './store';\nimport Comment from './Comment';\nimport TaskAssignment from './TaskAssignment';\nimport { useTaskDetailsStyles } from './styles';\nimport { useCurrentUserId } from './CurrentUser';\nimport { useUser } from './store/hooks';\nexport default function TaskDetails({\n  id,\n  isOpen,\n  close\n}) {\n  const {\n    title,\n    rootCommentIds,\n    creatorId\n  } = hooks.useTask(id);\n  const updateTask = hooks.useUpdateTask();\n  const createComment = hooks.useCreateRootComment();\n  const currentUserId = useCurrentUserId();\n  const creator = useUser(creatorId); //\n  // edit title\n  //\n\n  const {\n    0: isTitleEditable,\n    1: setIsTitleEditable\n  } = useState(false);\n\n  const enableTitleEditing = () => setIsTitleEditable(true);\n\n  const disableTitleEditing = () => setIsTitleEditable(false);\n\n  const {\n    0: editedTitle,\n    1: setEditedTitle\n  } = useState(title);\n  const editedCleanedTitle = editedTitle.trim();\n\n  const handleClickCancelEditing = () => {\n    disableTitleEditing();\n    setEditedTitle(title);\n  };\n\n  const handleClickDoneEditing = () => {\n    if (editedCleanedTitle) {\n      updateTask(id, {\n        title: editedTitle\n      });\n      disableTitleEditing();\n    }\n  }; //\n  // comments\n  //\n\n\n  const {\n    0: isCommentFormShown,\n    1: setIsCommentFormShown\n  } = useState(false);\n\n  const showCommentForm = () => setIsCommentFormShown(true);\n\n  const hideCommentForm = () => setIsCommentFormShown(false);\n\n  const handleSubmitComment = value => {\n    createComment({\n      value,\n      taskId: id,\n      creatorId: currentUserId,\n      ts: new Date()\n    });\n    hideCommentForm();\n  };\n\n  const classNames = useTaskDetailsStyles();\n  return __jsx(Dialog, {\n    open: isOpen,\n    onBackdropClick: close,\n    fullWidth: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: classNames.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    className: classNames.header,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 11\n    }\n  }, __jsx(\"div\", {\n    className: classNames.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }\n  }, !isTitleEditable && __jsx(Typography, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 15\n    }\n  }, title, \" \", __jsx(EditButton, {\n    onClick: enableTitleEditing,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 25\n    }\n  })), isTitleEditable && __jsx(React.Fragment, null, __jsx(TextField, {\n    fullWidth: true,\n    autoFocus: true,\n    value: editedTitle,\n    onChange: e => setEditedTitle(e.target.value),\n    placeholder: \"Title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 17\n    }\n  }), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 17\n    }\n  }, __jsx(Button, {\n    onClick: handleClickCancelEditing,\n    variant: \"text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 19\n    }\n  }, \"Cancel\"), __jsx(Button, {\n    onClick: handleClickDoneEditing,\n    color: \"primary\",\n    disabled: !editedCleanedTitle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 19\n    }\n  }, \"Save\")))), __jsx(\"span\", {\n    className: classNames.closeBtn,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }\n  }, __jsx(CloseButton, {\n    onClick: close,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 15\n    }\n  }))), __jsx(\"div\", {\n    className: classNames.section,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 11\n    }\n  }, __jsx(Typography, {\n    variant: \"subtitle2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }\n  }, \"Created by \", creator.username)), __jsx(\"div\", {\n    className: classNames.section,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 11\n    }\n  }, __jsx(Typography, {\n    variant: \"subtitle2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }\n  }, \"Assigned to:\"), __jsx(TaskAssignment, {\n    id: id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }\n  })), __jsx(\"div\", {\n    className: classNames.section,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 11\n    }\n  }, __jsx(Typography, {\n    variant: \"subtitle2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }\n  }, (rootCommentIds === null || rootCommentIds === void 0 ? void 0 : rootCommentIds.length) ? 'Comments:' : 'No comments yet...'), isCommentFormShown ? __jsx(NewComment, {\n    onSubmit: handleSubmitComment,\n    onCancel: hideCommentForm,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 17\n    }\n  }) : __jsx(TextButton, {\n    onClick: showCommentForm,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 17\n    }\n  }, \"Leave a comment\"), rootCommentIds === null || rootCommentIds === void 0 ? void 0 : rootCommentIds.map(commentId => __jsx(Comment, {\n    key: commentId,\n    id: commentId,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 15\n    }\n  })))));\n}","map":{"version":3,"sources":["/Users/jv/Desktop/MyDevelopment/github/repo-react/dnd/kanban/kanban-dashboard/src/dashboard/TaskDetails.tsx"],"names":["React","useState","Dialog","Typography","TextField","Button","EditButton","CloseButton","TextButton","NewComment","hooks","Comment","TaskAssignment","useTaskDetailsStyles","useCurrentUserId","useUser","TaskDetails","id","isOpen","close","title","rootCommentIds","creatorId","useTask","updateTask","useUpdateTask","createComment","useCreateRootComment","currentUserId","creator","isTitleEditable","setIsTitleEditable","enableTitleEditing","disableTitleEditing","editedTitle","setEditedTitle","editedCleanedTitle","trim","handleClickCancelEditing","handleClickDoneEditing","isCommentFormShown","setIsCommentFormShown","showCommentForm","hideCommentForm","handleSubmitComment","value","taskId","ts","Date","classNames","root","header","e","target","closeBtn","section","username","length","map","commentId"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport Dialog from '@material-ui/core/Dialog';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\n\nimport { EditButton, CloseButton, TextButton } from '../components/buttons';\nimport { NewComment } from '../components/comment';\n\nimport { hooks } from './store';\nimport Comment from './Comment';\nimport TaskAssignment from './TaskAssignment';\nimport { useTaskDetailsStyles } from './styles';\nimport { useCurrentUserId } from './CurrentUser';\nimport { useUser } from './store/hooks';\n\nexport interface Props {\n  id: string,\n  isOpen?: boolean,\n  close: () => void\n}\nexport default function TaskDetails({ id, isOpen, close }: Props) {\n  const { title, rootCommentIds, creatorId } = hooks.useTask(id);\n  const updateTask = hooks.useUpdateTask();\n  const createComment = hooks.useCreateRootComment();\n  const currentUserId = useCurrentUserId();\n  const creator = useUser(creatorId);\n\n  //\n  // edit title\n  //\n  const [isTitleEditable, setIsTitleEditable] = useState(false);\n  const enableTitleEditing = () => setIsTitleEditable(true);\n  const disableTitleEditing = () => setIsTitleEditable(false);\n  const [editedTitle, setEditedTitle] = useState(title);\n  const editedCleanedTitle = editedTitle.trim();\n  const handleClickCancelEditing = () => {\n    disableTitleEditing();\n    setEditedTitle(title);\n  };\n  const handleClickDoneEditing = () => {\n    if (editedCleanedTitle) {\n      updateTask(id, { title: editedTitle });\n      disableTitleEditing();\n    }\n  };\n\n  //\n  // comments\n  //\n  const [isCommentFormShown, setIsCommentFormShown] = useState(false);\n  const showCommentForm = () => setIsCommentFormShown(true);\n  const hideCommentForm = () => setIsCommentFormShown(false);\n  const handleSubmitComment = (value: string) => {\n    createComment({ value, taskId: id, creatorId: currentUserId, ts: new Date() });\n    hideCommentForm();\n  };\n\n  const classNames = useTaskDetailsStyles();\n\n  return (\n    <Dialog open={isOpen} onBackdropClick={close} fullWidth>\n      <div className={classNames.root}>\n          <div className={classNames.header}>\n            <div className={classNames.title}>\n              {!isTitleEditable &&\n              <Typography>\n                {title} <EditButton onClick={enableTitleEditing} />\n              </Typography>\n              }\n\n              {isTitleEditable &&\n              <>\n                <TextField\n                  fullWidth\n                  autoFocus\n                  value={editedTitle}\n                  onChange={e => setEditedTitle(e.target.value)}\n                  placeholder=\"Title\"\n                />\n\n                <div>\n                  <Button onClick={handleClickCancelEditing} variant=\"text\">Cancel</Button>\n                  <Button\n                    onClick={handleClickDoneEditing}\n                    color=\"primary\"\n                    disabled={!editedCleanedTitle}\n                  >Save</Button>\n                </div>\n              </>\n              }\n            </div>\n            <span className={classNames.closeBtn}>\n              <CloseButton onClick={close}/>\n            </span>\n          </div>\n\n          <div className={classNames.section}>\n            <Typography variant=\"subtitle2\">Created by {creator.username}</Typography>\n          </div>\n\n          <div className={classNames.section}>\n            <Typography variant=\"subtitle2\">Assigned to:</Typography>\n            <TaskAssignment id={id} />\n          </div>\n\n          <div className={classNames.section}>\n            <Typography variant=\"subtitle2\">{rootCommentIds?.length ? 'Comments:' : 'No comments yet...'}</Typography>\n\n            {isCommentFormShown\n              ? <NewComment onSubmit={handleSubmitComment} onCancel={hideCommentForm}/>\n              : <TextButton onClick={showCommentForm}>Leave a comment</TextButton>\n            }\n\n            {rootCommentIds?.map(commentId => (\n              <Comment key={commentId} id={commentId} />\n            ))}\n          </div>\n        </div>\n    </Dialog>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}