{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport { v4 as uuid } from 'uuid';\nimport { emptyProjectData } from '../dashboard/store';\nimport { createBoilerplateState } from './boilerplate';\nimport starterData from './starter-data';\nvar localStorageKey = 'kanban_dashboard_projects';\nexport var LocalStorageServiceClient = /*#__PURE__*/function () {\n  function LocalStorageServiceClient() {\n    _classCallCheck(this, LocalStorageServiceClient);\n  }\n\n  _createClass(LocalStorageServiceClient, [{\n    key: \"getUserProjectsMeta\",\n    value: function () {\n      var _getUserProjectsMeta = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var projects;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.getProjects();\n\n              case 2:\n                projects = _context.sent;\n                return _context.abrupt(\"return\", Object.values(projects).map(function (project) {\n                  return project.meta;\n                }));\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getUserProjectsMeta() {\n        return _getUserProjectsMeta.apply(this, arguments);\n      }\n\n      return getUserProjectsMeta;\n    }()\n  }, {\n    key: \"createProject\",\n    value: function () {\n      var _createProject = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(title, description, boilerplate) {\n        var id, data, project;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                id = uuid();\n                data = boilerplate ? createBoilerplateState() : emptyProjectData;\n                project = {\n                  meta: {\n                    id: id,\n                    title: title,\n                    description: description,\n                    ts: new Date()\n                  },\n                  data: data\n                };\n                _context2.next = 5;\n                return this.putProject(id, project);\n\n              case 5:\n                return _context2.abrupt(\"return\", id);\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function createProject(_x, _x2, _x3) {\n        return _createProject.apply(this, arguments);\n      }\n\n      return createProject;\n    }()\n  }, {\n    key: \"getProject\",\n    value: function () {\n      var _getProject = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(id) {\n        var projects;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this.getProjects();\n\n              case 2:\n                projects = _context3.sent;\n                return _context3.abrupt(\"return\", projects[id]);\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function getProject(_x4) {\n        return _getProject.apply(this, arguments);\n      }\n\n      return getProject;\n    }()\n  }, {\n    key: \"updateProject\",\n    value: function () {\n      var _updateProject = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(id, project) {\n        var existing;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this.getProject(id);\n\n              case 2:\n                existing = _context4.sent;\n\n                if (existing) {\n                  _context4.next = 5;\n                  break;\n                }\n\n                throw new Error(\"project \".concat(id, \" does not exist\"));\n\n              case 5:\n                return _context4.abrupt(\"return\", this.putProject(id, project));\n\n              case 6:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function updateProject(_x5, _x6) {\n        return _updateProject.apply(this, arguments);\n      }\n\n      return updateProject;\n    }()\n  }, {\n    key: \"updateProjectData\",\n    value: function () {\n      var _updateProjectData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(id, projectData) {\n        var project;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this.getProject(id);\n\n              case 2:\n                project = _context5.sent;\n\n                if (project) {\n                  _context5.next = 5;\n                  break;\n                }\n\n                throw new Error(\"project \".concat(id, \" does not exist\"));\n\n              case 5:\n                project.data = projectData;\n                return _context5.abrupt(\"return\", this.putProject(id, project));\n\n              case 7:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function updateProjectData(_x7, _x8) {\n        return _updateProjectData.apply(this, arguments);\n      }\n\n      return updateProjectData;\n    }()\n  }, {\n    key: \"deleteProject\",\n    value: function () {\n      var _deleteProject = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(id) {\n        var projects, persistable;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return this.getProjects();\n\n              case 2:\n                projects = _context6.sent;\n                delete projects[id];\n                persistable = JSON.stringify(projects);\n                localStorage.setItem(localStorageKey, persistable);\n\n              case 6:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function deleteProject(_x9) {\n        return _deleteProject.apply(this, arguments);\n      }\n\n      return deleteProject;\n    }()\n  }, {\n    key: \"getProjects\",\n    value: function () {\n      var _getProjects = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n        var persistable;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                persistable = localStorage.getItem(localStorageKey);\n                return _context7.abrupt(\"return\", persistable ? JSON.parse(persistable) : starterData);\n\n              case 2:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7);\n      }));\n\n      function getProjects() {\n        return _getProjects.apply(this, arguments);\n      }\n\n      return getProjects;\n    }()\n  }, {\n    key: \"putProject\",\n    value: function () {\n      var _putProject = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(id, project) {\n        var projects, persistable;\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.next = 2;\n                return this.getProjects();\n\n              case 2:\n                projects = _context8.sent;\n                projects[id] = project;\n                persistable = JSON.stringify(projects);\n                localStorage.setItem(localStorageKey, persistable);\n\n              case 6:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function putProject(_x10, _x11) {\n        return _putProject.apply(this, arguments);\n      }\n\n      return putProject;\n    }()\n  }]);\n\n  return LocalStorageServiceClient;\n}();","map":{"version":3,"sources":["/Users/jv/Desktop/MyDevelopment/github/repo-react/dnd/kanban/kanban-dashboard/src/service/client.ts"],"names":["v4","uuid","emptyProjectData","createBoilerplateState","starterData","localStorageKey","LocalStorageServiceClient","getProjects","projects","Object","values","map","project","meta","title","description","boilerplate","id","data","ts","Date","putProject","getProject","existing","Error","projectData","persistable","JSON","stringify","localStorage","setItem","getItem","parse"],"mappings":"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","sourcesContent":["import { v4 as uuid } from 'uuid';\nimport { emptyProjectData } from '../dashboard/store';\nimport { Project, ProjectData, ProjectMeta } from '../dashboard/store/types';\nimport { createBoilerplateState } from './boilerplate';\nimport starterData from './starter-data';\n\nconst localStorageKey = 'kanban_dashboard_projects';\n\nexport interface ServiceClient {\n  getUserProjectsMeta(): Promise<ProjectMeta[]>\n  createProject(title: string, description: string, boilderplate: boolean): Promise<string>\n  getProject(id: string): Promise<Project>\n  updateProject(id: string, project: Project): Promise<void>\n  deleteProject(id: string): Promise<void>\n}\n\nexport class LocalStorageServiceClient implements ServiceClient{\n  async getUserProjectsMeta() {\n    const projects = await this.getProjects();\n    return Object.values(projects).map((project: Project) => project.meta);\n  }\n\n  async createProject(title: string, description: string, boilerplate: boolean) {\n    const id = uuid();\n    const data = boilerplate ? createBoilerplateState() : emptyProjectData;\n\n    const project: Project = {\n      meta: { id, title, description, ts: new Date() },\n      data\n    };\n\n    await this.putProject(id, project);\n\n    return id;\n  }\n\n  async getProject(id: string): Promise<Project> {\n    const projects = await this.getProjects();\n    return projects[id];\n  }\n\n  async updateProject(id: string, project: Project) {\n    const existing = await this.getProject(id);\n    if (!existing) {\n      throw new Error(`project ${id} does not exist`);\n    }\n\n    return this.putProject(id, project);\n  }\n\n  async updateProjectData(id: string, projectData: ProjectData) {\n    const project = await this.getProject(id);\n    if (!project) {\n      throw new Error(`project ${id} does not exist`);\n    }\n\n    project.data = projectData;\n\n    return this.putProject(id, project);\n  }\n\n  async deleteProject(id: string) {\n    const projects = await this.getProjects();\n    delete projects[id];\n    const persistable = JSON.stringify(projects);\n    localStorage.setItem(localStorageKey, persistable);\n  }\n\n  private async getProjects(): Promise<Record<string, Project>> {\n    let persistable = localStorage.getItem(localStorageKey);\n\n    return persistable\n      ? JSON.parse(persistable)\n      : starterData\n  }\n\n  private async putProject(id: string, project: Project) {\n    const projects = await this.getProjects();\n    projects[id] = project;\n    const persistable = JSON.stringify(projects);\n    localStorage.setItem(localStorageKey, persistable)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}